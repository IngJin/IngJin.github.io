{"meta":{"title":"잉로그","subtitle":"Study & Develop Blog","description":"잉진은 오늘도 코딩을 합니다.","author":"IngJin","url":"https://ingjin.github.io","root":"/"},"pages":[{"title":"All categories","date":"2019-03-23T13:36:50.000Z","updated":"2019-03-25T12:07:42.260Z","comments":false,"path":"categories/index.html","permalink":"https://ingjin.github.io/categories/index.html","excerpt":"","text":""},{"title":"태그수집가","date":"2019-03-23T13:36:31.000Z","updated":"2019-03-25T12:10:05.791Z","comments":false,"path":"tags/index.html","permalink":"https://ingjin.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA 01 데이터타입","slug":"java01","date":"2019-04-03T09:56:37.000Z","updated":"2019-04-03T15:02:21.819Z","comments":true,"path":"2019/04/03/java01/","link":"","permalink":"https://ingjin.github.io/2019/04/03/java01/","excerpt":"","text":"기본용어 선언 변수의 형을 정의하는 것 1int a; char b; double c; 할당 값을 주는 것 1a = 1; b = 'A'; c = 12.5; 초기화 선언과 동시에 값을 주는 것 1int a = 1; char b = 'A' double c = 12.5; 나열 같은 데이터 타입일때 쭉 연결하는 것 1int a = 1, b = 2; 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 1int a = 1; → int a = 3; 변수 변수 데이터를 저장할 메모리 기억공간 기억공간에는 이름이 있어야 한다. ▶ 식별자 데이터를 담는 상자 : 크기 ▶ Data Type(자료형) ※ 변수 이름 작성 규칙 반드시 영문자 소문자로 시작 첫글자는 영문자, ‘_’, ‘$’으로만 시작 예약어(KeyWord)는 사용 불가 띄어쓰기는 사용할 수 없다 가급적이면 이름에 의미가 나타나도록 작성하자 자료형 자료형(Data Type) 변수의 크기와 저장해야 할 데이터의 종류를 결정 기본자료형(PDT): 기본 데이터 타입의 크기가 정해져있다.CPU나 운영체제에 따라 변경되지 않는다. 정수형 : byte(1), short(2), int(4), long(8)실수형 : float(4), double(8)문자형(단일문자) : char(2)부울형(논리형) : boolean(1) 사용자정의 자료형(UDDP): 참조형 자료(Reference Type) → 4Byte 클래스 타입인터페이스 타입배열(열거) 타입 예제 1 선언,할당,초기화 1234567891011121314151617181920212223public class Variable01 &#123; public static void main(String[] args) &#123; //정수 2개를 저장할 변수를 선언하시오.(변수명은 a.b) int a; //정수형 변수a를 선언 int b; //정수형 변수b를 선언 //int a,b; //같은 자료형의 변수를 나열(comma(,)구분) //변수 a에 10, 변수 b에 20을 할당하시오. a = 10; //변수 a에 값(10)을 할당(대입) b = 20; //변수 b에 값(20)을 할당(대입) //정수형 변수c와 d를 선언하고, c에 30,d에 40을 할당하시오. int c = 30; //선언과 동시에 값을 할당 ▶ 초기화 int d = 40; //선언과 동시에 값을 할당 ▶ 초기화 // int c = 30, d = 40; //같은 자료형의 변수를 초기화하고 나열 //각각의 변수에 저장된 데이터를 출력 System.out.println(\"a의 값:\" + a); System.out.println(\"b의 값:\" + b); System.out.println(\"c의 값:\" + c); System.out.println(\"d의 값:\" + d); &#125;//main()&#125;//class 예제 2 재할당 1234567891011121314151617public class Variable02 &#123; public static void main(String[] args) &#123; //정수형 변수 a와 b를 선언하고, a에 10, b에 20을 할당하시오. int a = 10; int b = 20; //변수 a와 b의 값을 출력 System.out.println(a); System.out.println(b); //a의 값을 30으로 b의 값을 40으로 변경하여 출력하시오 ▶ 재할당 a = 30; // a의 값이 10에서 30으로 변경(재할당) b = 40; // b의 값이 20에서 40으로 변경(재할당) System.out.println(a); System.out.println(b); &#125; //main&#125; //class 예제 3 정수형 byte,short,int,long 1234567891011121314151617public class Variable03 &#123; public static void main(String[] args) &#123; //정수형 데이터 타입 : byte, short, int, long byte b = 100; //1Byte (-128 ~ 127) System.out.println(\"변수 b:\" + b); short s = 1000; //2Byte (-32,768 ~ 32,767) System.out.println(\"변수 s:\" + s); int i = 1000000; //4Byte (-2,147,483,648 ~ 2,147,483,647) System.out.println(\"변수 i:\" + i); long l = 12345678900L; // long 타입은 숫자 뒤에 L, // 모든 정수타입 리터럴은 int형으로 처리하기 때문 System.out.println(\"변수 l:\" + l); &#125; //main()&#125; //class 예제 4 실수형 float,double 1234567891011121314public class Variable04 &#123; public static void main(String[] args) &#123; //실수형 데이터 타입 : float, double float f = 123.4567890123456789F; //4Byte double d = 123.4567890123456789; //8Byte System.out.println(\"변수 f:\" + f); //123.45679 //마지막 숫자 반올림해서 나옴 System.out.println(\"변수 d:\" + d); //123.45678901234568 //마지막 숫자 반올림해서 나옴 &#125;//main()&#125;//class 예제 5 문자형 char / 문자열 String 12345678910111213141516171819202122public class Variable05 &#123; public static void main(String[] args) &#123; //문자 데이터 타입 : char(2Byte) ▶ 하나의 글자만 저장 //값을 할당할 때는 작은따옴표를 사용한다. char a = 'A'; char b = '가'; char c = '★'; System.out.println(\"변수 a:\" + a); System.out.println(\"변수 b:\" + b); System.out.println(\"변수 c:\" + c); //---------------------------------- //String : 문자,문자열을 저장할 수 있는 클래스(→첫글자 대문자) //값을 할당할 때는 쌍따옴표를 사용한다. String str1 = \"ABC\"; String str2 = \"가나다\"; System.out.println(\"변수 str1:\" +str1); System.out.println(\"변수 str2:\" +str2); &#125;//main()&#125;//class 예제 6 논리형 boolean 12345678910public class Variable06 &#123; public static void main(String[] args) &#123; // 논리형(부울형):boolean(1byte)▶true,false 만 기억 boolean t = true; boolean f = false; System.out.println(\"변수 t:\" + t); System.out.println(\"변수 f:\" + f); &#125;&#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/tags/JAVA/"}]},{"title":"19년 4월 1주차 Today I Learned","slug":"1941","date":"2019-04-01T09:56:37.000Z","updated":"2019-04-05T14:19:05.217Z","comments":true,"path":"2019/04/01/1941/","link":"","permalink":"https://ingjin.github.io/2019/04/01/1941/","excerpt":"","text":"190401 TIL 국비과정 본과정 시작 19.04.01~19.09.30 09:20 ~ 18:00 (월~금) 사전학습때 했던거 복습 개발환경구축 ㅎ.. 수업 교재를 받았다. 정처기는 취득했기에 매물예정 190402 TIL 변수프로그램 실행중에 값을 임시저장 하기위한 공간 변수명 선언 규칙(Naming Convention) JAVA는 대소문자를 구분한다. 첫글자는 반드시 문자, _, $로만 시작된다. 지정된 단어(Keyword)는 사용할 수 없다. 변수의 이름은 소문자로 시작하고,단어와 단어를 연결하고자 할 경우,_를 이용하거나, 연결되는 단어의 첫글자를 대문자로 표시예 : sum_result, totalCount, salePrice 등 변수의 이름은 가능하면 의미를 알아볼 수 있도록 사용예 : userId, userPw 등 기본 데이터타입 논리타입 boolean (1Byte) true/false만 기억 문자타입 char (2Byte) 하나의 글자만 저장 정수타입 byte (1Byte)[-128 ~ 127] short (2Byte)[-32,768 ~ 32,767] int (4Byte)[기본형][-2,147,483,648 ~ 2,147,483,647] long (8byte)아무튼 큼, long 타입은 숫자 뒤에 `L`,`l` 실수타입 float (4Byte)숫자 뒤에 `F`,`f` double (8byte) [기본형] 190403 TIL 선언 변수의 형을 정의하는 것 할당 값을 주는 것 초기화 선언과 동시에 값을 주는 것 나열 같은 데이터 타입일때 쭉 연결하는 것 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 형 변환(Casting) 규칙====== UpCasting (자동형 변환, 묵시적 형변환) ======&gt;byte(1) → short(2)/ char(2) → int(4) → long(8) → float(4) → double(8)&lt;===== DownCasting (강제형 변환, 명시적 형변환) ===== 190404 TIL 연산주어진 식을 계산하여 결과를 얻어내는 과정 산술연산자: + , - , * , / , % %(나머지연산)이란?: 짝수/홀수, 배수의 판단에 사용(주로 조건식에서 사용) 증감연산자: ++(증가), --(감소) → 반복문에서 많이 사용 별도의 연산결과를 처리하지 않은 연산자 : 단항연산 연산자의 위치가 변수의 앞인지 뒤인지에 따라 결과가 다르다. 비트연산자: 개발자의 입장에서 비트를 직접 조작할 수 있다는 장점 → 하드웨어 제어현재는 자바에서 거의 사용하지 않는다. &amp;(AND): 모두 1일때 → 1출력 |(OR): 하나라도 1일때 → 1출력 ^(XOR): 서로 다를때 → 1출력 비교연산자: 조건식에 많이 사용, 연산의 결과는 true, false 반환 &gt;, &gt;=, &lt;, &lt;= : 수학의 연산과 같은 관계연산자(비교연산) a = b : 수학에서는 같다라는 의미이지만 프로그램에서는 할당(대입)연산자 a == b : 프로그램에서 같다라는 의미 a != b : 같지않다라는 의미 190405 TIL 3항연산자 : 3개의 항으로 구성된다. 조건식을 작성할 경우 편리하다. 조건식 ? &quot;참값&quot; : &quot;거짓값&quot;; 특수기호문자(Escape Sequence) : 출력문에서 많이 사용된다. 역슬래시()를 먼저 입력하고 사용한다. \\t : 탭간격(기본본 8칸 띄어쓰기) \\n : 줄바꿈(뉴라인) \\b : 백스페이스 \\r : Carriage Return \\&#39; : 작은따옴표를 표시 \\&quot; : 큰따옴표를 표시 \\\\ : (역슬래시, root) 표시 cmd에서 실행 16진수 : 숫자 앞에 0x를 붙인다.8진수 : 숫자 앞에 0을 붙인다. 단순 if문: 조건을 판단하여 참일 경우에만 실행 123if(조건식 : 비교연산자 또는 논리연산자가 들어가야함)&#123; 조건식이 참일때 실행되는 문장;&#125;//if 블럭 if문: 조건을 판단하여 참일때 또는 거짓일떄의 명령을 실행 if(조건식){ 참일때 실행되는 문장; //여기까지 하면 단순if } else{ 거짓일때 실행되는 문장; }//if_else","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"19년 3월 5주차 Today I Learned","slug":"190329","date":"2019-03-29T09:56:37.000Z","updated":"2019-03-31T13:08:19.925Z","comments":true,"path":"2019/03/29/190329/","link":"","permalink":"https://ingjin.github.io/2019/03/29/190329/","excerpt":"","text":"190325 TIL 국비과정 사전예습 시작 19.03.25~19.03.29 09:20 ~ 12:10 (월~금) 블로그에 Disqus를 연동이제 나도 댓글을 남길 수 있다. Disqus 연동 요약Disqus에 가입하여 shortname을 설정 한 뒤themes/note 경로의 _config.yml 에서#Disqus부분을 다음과 같이 수정한다. #Disqus disqus: enable: true shortname: ingjin #shortname 삽입 count: true lazyload: false 그렇다, 오늘은 별거 안했다. 190326 TIL Java 개발 환경 구축 JDK 설치 JAVA_HOME 환경 변수 생성 PATH 환경 변수 추가;%JAVA_HOME%\\bin; CLASSPATH 환경 변수 생성.;%JAVA_HOME%\\lib; CLASSPATH? 컴퓨터 어딘가에 존재하는클래스 파일을 사용하기 위한 방법. 미지정시 현재 디렉토리에서만필요한 클래스를 가져다 쓴다. 코드블럭 라인넘버가 나온다.어제는 왜 안나온거지..?function add(x, y) { return x + y } 190327 TIL 예비군 기본훈련 다녀왔습니다. Markdown 이미지 크기 조절&lt;img&gt;태그가 더 편한것 같은 이 느낌 &lt;img src=\"이미지 url\" width=\"원하는 크기\"&gt; width=&quot;800&quot; width=&quot;400&quot; 사실 마크다운으로 수정하면자꾸 엑박이 뜬다..이유가 뭘까..? 190328 TIL java파일을 컴파일하면class파일이 생성된다. 컴파일코드를 컴퓨터가 읽을 수 있도록 변환하는 과정. 패키지서로 관련이 있는 클래스 또는 인터페이스들을하나로 묶어 놓은 묶음. syso 입력 후 ctrl+space= System.out.println() 생성 190329 TIL 이클립스(Eclipse)에서프로젝트를 불러오는 방법= Import하는 방법 헝가리안 표기법 변수 및 함수의 인자 이름 앞에데이터 타입을 명시하는 코딩 규칙 요즘 안쓴다고 한다. 사전학습이 끝났다.생각해보니 뭐 안했다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"19년 3월 4주차 Today I Learned","slug":"190324","date":"2019-03-23T15:00:00.000Z","updated":"2019-03-30T14:04:11.291Z","comments":true,"path":"2019/03/24/190324/","link":"","permalink":"https://ingjin.github.io/2019/03/24/190324/","excerpt":"","text":"190323 TIL 초보몽키님의 블로그를 참고하여나도 Today I Learned (TIL)을본격적으로 시작해 보려고 한다. HTML,CSS,JavaScript 모르는 상태에서구글링하면서 Hexo블로그를 만들어 보았다.TIL을 여기서 할 지 티스토리에서 할 지 고민 중 _config.yml파일을 수정하는 방법을 알았다. Notepad++를 사용한다. 190324 TIL Hueman에서 nexT로 갈아탔다. 간단한 Markdown문법을 배웠다.Markdown Editor는 Marp를 써보려고 한다. Markdown이미지 업로드 꿀팁 이미지가 올라와서 행복한 개구리 :)","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-22T07:28:05.567Z","updated":"2019-03-22T07:28:05.567Z","comments":true,"path":"2019/03/22/hello-world/","link":"","permalink":"https://ingjin.github.io/2019/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}