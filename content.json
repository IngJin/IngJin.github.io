{"meta":{"title":"잉로그","subtitle":"Study & Develop Blog","description":"잉진은 오늘도 코딩을 합니다.","author":"IngJin","url":"https://ingjin.github.io","root":"/"},"pages":[{"title":"태그수집가","date":"2019-03-23T13:36:31.000Z","updated":"2019-03-25T12:10:05.791Z","comments":false,"path":"tags/index.html","permalink":"https://ingjin.github.io/tags/index.html","excerpt":"","text":""},{"title":"All categories","date":"2019-03-23T13:36:50.000Z","updated":"2019-03-25T12:07:42.260Z","comments":false,"path":"categories/index.html","permalink":"https://ingjin.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"JAVA기초 04. 조건문 ( if문 / Switch문 )","slug":"java04","date":"2019-04-09T09:56:37.000Z","updated":"2019-04-12T13:04:46.302Z","comments":true,"path":"2019/04/09/java04/","link":"","permalink":"https://ingjin.github.io/2019/04/09/java04/","excerpt":"","text":"조건문이란?조건에 따라 코드의 실행 흐름을 다르게 동작하도록 제어하는 것종류는 if문, if~else문, else~if문, switch~case문 if문if문 : 조건을 판단하여 참일 경우에만 실행 123if(조건식)&#123; // 비교연산자 또는 논리연산자가 들어간다. 조건식이 참일때 실행되는 문장;&#125;//if 실행되는 문장이 1줄이면 {}을 생략해도 된다. if(조건식) 실행문장;(권장하진 않음) 예제1123456789101112131415public class If &#123; public static void main(String[] args) &#123; int a = 10; if(a % 2 == 0) &#123; // a를 2로 나눈 나머지 값이 0과 같다 : 짝수 System.out.println(\"입력값은 \" + a + \"입니다.\"); System.out.println(a + \"은 짝수입니다.\"); &#125;//if int b = 9; if(b % 2 != 0) &#123; // b를 2로 나눈 나머지 값이 0과 같지 않다 : 홀수 System.out.println(\"입력값은 \" + b + \"입니다.\" + \"\\n\" + b + \"는 홀수입니다.\"); &#125;//if &#125;//main()&#125;//class if~else문if~else문 : 조건을 판단하여 참일때 또는 거짓일때의 명령을 실행 12345if(조건식)&#123; 참일때 실행되는 문장; //여기까지 수행되면 단순 if문&#125; else&#123; 거짓일때 실행되는 문장;&#125;//if 예제11234567891011public class If_else &#123; public static void main(String[] args) &#123; int a = 10; if(a % 2 == 0) &#123; System.out.println(\"짝수입니다.\"); //조건식이 true &#125;else &#123; System.out.println(\"홀수입니다.\"); //조건식이 false &#125;//if &#125;//main()&#125;//class 예제21234567891011121314151617181920public class If_else &#123; public static void main(String[] args) &#123; //성별코드(code) 값이 1 또는 3이면 '남자', 그외에는 '여자'로 출력 int code = 3; /* if(code != 2) &#123; System.out.println(\"남자입니다.\"); &#125; else &#123; System.out.println(\"여자입니다.\"); &#125;*/ //만약 이렇게 코드를 만들면 1,3뿐 아니라 4를 썼을때도 남자가 나온다. if(code == 1 || code == 3) &#123; System.out.println(\"남자입니다.\"); &#125; else &#123; System.out.println(\"여자입니다.\"); &#125;//if &#125;//main()&#125;//class else~if문else~if문 : 여러개의 조건을 판단하여, 해당 조건을 만족할 경우 실행 123456789if(조건식1)&#123; 조건식1이 참일때 실행되는 문장;&#125;else if(조건식2)&#123; 조건식2가 참일때 실행되는 문장;&#125;else if(조건식N)&#123; 조건식N이 참일때 실행되는 문장;&#125;else&#123; 거짓일때 실행되는 문장;&#125; 예제1123456789101112131415161718public class Else_if &#123; public static void main(String[] args) &#123; int score = 87; if(score &gt;= 90) &#123; System.out.println(\"A학점\"); &#125;else if(score &gt;= 80) &#123; System.out.println(\"B학점\"); &#125;else if(score &gt;= 70) &#123; System.out.println(\"C학점\"); &#125;else if(score &gt;= 60) &#123; System.out.println(\"D학점\"); &#125;else &#123; System.out.println(\"F학점\"); &#125;//if &#125;//main()&#125;//class 예제2123456789101112131415public class Else_if &#123; public static void main(String[] args) &#123; //성별코드(code)가 1이면 '남자', 2이면 '여자', 3이면 '남자', 4이면 '여자' //그 외에는 오류메세지(\"성별코드가 잘못입력되었습니다\")출력 int code = 3; if(code == 1 || code == 3) &#123; System.out.println(\"남자입니다.\"); &#125;else if(code == 2 || code == 4) &#123; System.out.println(\"여자입니다.\"); &#125;else &#123; System.out.println(\"성별코드 오류\"); &#125;//if &#125;//main()&#125;//class 중첩 if문중첩 if문 : if문 안에 다른 if문이 있는 문장 123456789if(조건식A)&#123; if(조건식1)&#123; 조건식A를 만족한 상태에서 조건식1이 참일때 실행되는 문장; &#125;else if(조건식2)&#123; 조건식A를 만족한 상태에서 조건식2가 참일때 실행되는 문장; &#125;//if&#125;else if(조건식B)&#123; 조건식 B가 참일때 실행되는 문장;&#125;//if 예제112345678910111213141516171819202122public class If_if &#123; public static void main(String[] args) &#123; int score = -87; if(score &gt;= 0 &amp;&amp; score &lt;= 100) &#123; if(score &gt;= 90) &#123; System.out.println(\"A학점\"); &#125;else if(score &gt;= 80) &#123; System.out.println(\"B학점\"); &#125;else if(score &gt;= 70) &#123; System.out.println(\"C학점\"); &#125;else if(score &gt;= 60) &#123; System.out.println(\"D학점\"); &#125;else &#123; System.out.println(\"F학점\"); &#125;//if &#125;else &#123; System.out.println(\"점수입력오류\"); &#125;//else &#125;//main()&#125;//class switch~case문switch~case문 : 다중 if문을 간략하게 표현 1234567891011121314switch(기준값)&#123; case값1 : 값1이 참일때 실행되는 문장; break; case값2 : 값2가 참일때 실행되는 문장; break; case값N : 값N이 참일때 실행되는 문장; break; default : 거짓일때 실행되는 문장; break;&#125; 기준값, 비교값(값1,값2,값N)은 정수형(수치형)의 자료이여야 한다. 실행문 뒤에는 반드시 break; 입력 예제1123456789101112131415161718192021222324252627public class Switch_case &#123; public static void main(String[] args) &#123; int score = 87; switch(score / 10) &#123; case 10 : //100 // System.out.println(\"A학점\"); // break; 이렇게해도 가능 case 9 : break;에서 값나옴 case 9 : //90점 ~ 99점 System.out.println(\"A학점\"); break; case 8 : //80점 ~ 89점 System.out.println(\"B학점\"); break; case 7 : //70점 ~ 79점 System.out.println(\"C학점\"); break; case 6 : //60점 ~ 69점 System.out.println(\"D학점\"); break; default : //60점 미만 System.out.println(\"F학점\"); break; &#125;//switch &#125;//main()&#125;//class","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/tags/JAVA/"}]},{"title":"19년 4월 2주차 Today I Learned","slug":"1942","date":"2019-04-08T09:56:37.000Z","updated":"2019-04-12T13:13:44.528Z","comments":true,"path":"2019/04/08/1942/","link":"","permalink":"https://ingjin.github.io/2019/04/08/1942/","excerpt":"","text":"190408 TIL 다중 if문 : 여러개의 조건을 판단하여, 해당 조건을 만족할 경우 실행 123456789if(조건식1)&#123; 조건식1이 참일때 실행되는 문장;&#125;else if(조건식2)&#123; 조건식2가 참일때 실행되는 문장;&#125;else if(조건식N)&#123; 조건식N이 참일때 실행되는 문장;&#125;else&#123; 거짓일때 실행되는 문장; &#125; 중첩 if문 : if문 안에 다른 if문이 있는 문장 123456789if(조건식A)&#123; if(조건식1)&#123; 조건식A를 만족한 상태에서 조건식1이 참일때 실행되는 문장; &#125;else if(조건식2)&#123; 조건식A를 만족한 상태에서 조건식2가 참일때 실행되는 문장; &#125;//if&#125;else if(조건식B)&#123; 조건식 B가 참일때 실행되는 문장;&#125;//if 선택문(switch ~~ case ~~) : 다중 if문을 간략하게 표현 1234567891011121314switch(기준값)&#123; case값1 : 값1이 참일때 실행되는 문장; break; case값2 : 값2가 참일때 실행되는 문장; break; case값N : 값N이 참일때 실행되는 문장; break; default : 거짓일때 실행되는 문장; break;&#125; 기준값, 비교값(값1,값2,값N)은 정수형(수치형)의 자료이여야 한다. 실행문 뒤에는 반드시 break; 입력 제한사항(제약조건)으로 인하여 실무에서는 거의 사용되지 않는다. 반복문(순환문, Loop문) : for, while, do ~ while 123for(초기값(시작값) ; 조건식(최종값) ; 반복후작업(증감값)) &#123; 실행문(반복할 문장); &#125; 190409 TIL DB 오라클/SQL : 숫자함수,문자함수,날짜함수,형변환함수, 일반함수 while : 반복횟수를 모를 경우 사용 (선조건 → 후처리) 12345초기값 설정; while(조건식)&#123; 조건식이 참일때 실행되는 문장(실행문); 증감값;&#125; do~~while : 조건이 처음부터 거짓이더라도 실행문(do)은 최소 1번은 실행 (선처리 → 후조건) 12345초기값;do&#123; 실행문; 증감값;&#125;while(조건식); 드디어 별찍기를 해봤다.사실 잘 모르겠다. 190410 TIL Scanner 클래스: 정수,실수,문자열을 읽을수있음 사용자로부터 입력받기위한 준비 1import java.util.Scanner; : Scanner를 사용하기 위해 외부클래스 호출 1Scanner sc = new Scanner(System.in); : Scanner 객체를 생성 System.in : 키보드로부터 입력 1int a = sc.nextInt(); : 정수를 입력 nextLine() 문자열 전체를 입력 190411 TIL DB 오라클/SQL : 조건문,그룹함수 Scanner복습 - 성적표,구구단 정보처리기사 교재 판매완료 뜬금없는 소방훈련, 이제 CPR 자신있음.. ㅋ 190412 TIL DB 오라클/SQL: group by, having, table join 배열(Array): 객체(Class Object)로 취급 → 참조형(Reference) 자료구조 동일한 기억공간을 메모리에 연속적으로 생성하는 구조 : 리스트(선형)구조 같은 타입을 갖는 변수들의 집합 배열의 접근은 반드시 요소번호(index)로 접근하며, index는 0부터 시작 배열의 크기(길이) : 배열명.length","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"JAVA기초 03.연산자(Operator)","slug":"java03","date":"2019-04-07T09:56:37.000Z","updated":"2019-04-09T15:13:26.071Z","comments":true,"path":"2019/04/07/java03/","link":"","permalink":"https://ingjin.github.io/2019/04/07/java03/","excerpt":"","text":"연산 연산 : 주어진 식을 계산하여 결과를 얻어내는 과정 명령어의 형식[피연산자 연산자 피연산자]ex) a + 5, b + 4, … 명령부 :연산자, OpCode 주소부 :연산에 필요한 값[피연산자], Operand 1. 산술연산자 산술연산자 : +(덧셈),-(뺄셈),*(곱셈),/(나눗셈)%(나머지연산) : 짝수/홀수, 배수의 판단에 사용 ▶ 주로 조건식에서 사용 123456789101112131415161718192021222324252627282930public class Operator01 &#123; public static void main(String[] args) &#123; int a = 10, b=3; int addResult = a + b; //덧셈 int subResult = a - b; //뺄셈 int mulResult = a * b; //곱셉 int divResult = a / b; //나눗셈 int modResult = a % b; //나머지 System.out.println(addResult); //출력값 : 13 System.out.println(subResult); //출력값 : 7 System.out.println(mulResult); //출력값 : 30 System.out.println(divResult); //출력값 : 3 (int로 선언했기 때문) System.out.println(modResult); //출력값 : 1 int x = 3, y = 5; System.out.println(\"x + y = \" + x + y); //출력값 : x + y = 35(결합) System.out.println(\"x + y = \" + (x + y)); //출력값 : x + y = 8(연산) System.out.println(x + y + \" = x + y\"); //출력값 : 8 = x + y //System.out.println(\"x - y = \" + x - y); //오류 : + x 결합 후 - y 나오기 때문 System.out.println(\"x - y = \" + (x - y)); //출력값 : x - y = -2 System.out.println(x - y + \" = x - y\"); //출력값 : -2 = x - y &#125;//main()&#125;//class 2. 증감연산자 증감연산자 : ++(증가), --(감소) ▶ 반복문에서 많이 사용 별도의 연산결과를 처리하지 않은 연산자 : 단항연산 연산자의 위치가 변수의 앞인지 뒤인지에 따라 결과가 다르다. 123456789101112131415161718192021222324252627282930public class Operator02 &#123; public static void main(String[] args) &#123; int a = 0; int b = 10; System.out.println(++a); //출력값 : 1 ▶ 전위표기법(prefix) System.out.println(--b); //출력값 : 9 int c = 0; int d = 10; System.out.println(c++); //출력값 : 0 메모리 상에서는 1 System.out.println(c); //출력값 : 1 System.out.println(d--); //출력값 : 10 메모리 상에서는 9 System.out.println(d); //출력값 : 9 //x = 5, y = 10 일 경우 'x++ + ++x + y++'의 결과와 //연산이 수행된후 'x+y'의 결과는? int x = 5; int y = 10; int z = x++ + ++x + y++; System.out.println(z); //출력값 : 22 (5 + 7 + 10) System.out.println(x+y); //출력값 : 18 (7 + 11) /* 연산 출력 메모리 x++ 5 6(x) ++x 7 7(X) y++ 10 11(y) 현장에서 이런거 쓸 일 없음~ */ &#125;//main()&#125;//class 3.비트연산자 비트연산자 : 개발자의 입장에서 비트를 직접 조작할 수 있다는 장점 → 하드웨어 제어 현재는 자바에서 거의 사용하지 않는다. 1.&amp;(AND): 모두 1일때 → 1출력 2.|(OR) : 하나라도 1일때 → 1출력 3.^(XOR): 서로 다를때 → 1출력 12345678910public class Operator03 &#123; public static void main(String[] args) &#123; int x = 3; //2진법 : 0011 int y = 2; //2진법 : 0010 System.out.println(x &amp; y); //출력값 : 2 (0010) System.out.println(x | y); //출력값 : 3 (0011) System.out.println(x ^ y); //출력값 : 1 (0001) &#125;//main()&#125;//class 4.비교연산자 비교연산자 : 연산의 결과는 true, false 반환 ▶ 조건식에 많이 사용 &gt;, &gt;=, &lt;, &lt;= : 수학의 연산과 같은 관계연산자(비교연산) a = b : 수학에서는 같다라는 의미이지만 프로그램에서는 할당(대입)연산자 a == b : 프로그램에서 같다라는 의미 a != b : 같지않다라는 의미 1234567891011121314public class Operator04 &#123; public static void main(String[] args) &#123; int a = 10, b = 5; System.out.println(a&gt;b); //true System.out.println(a&gt;=b); //true System.out.println(a&lt;b); //false System.out.println(a&lt;=b); //false System.out.println(a==b); //false System.out.println(a!=b); //true System.out.println(a&gt;10); //false System.out.println(a&gt;=10); //true &#125;//main()&#125;//class 5.논리연산자 논리연산자 : 연산의 결과는 true, false 반환 여러개의 조건을 판단 ▶ 조건식에 많이 사용 조건A &amp;&amp; 조건B : 조건A도, 조건B도 모두 참일 경우 → 참으로 출력 조건A || 조건B : 조건A 또는 조건B 중에서 하나라도 참일 경우 → 참으로 출력 AND 조건 (모두 만족) : ~~이면서, ~~이고 OR 조건 (하나라도 만족) : ~~이거나, ~~또는 1234567891011121314public class Operator05 &#123; public static void main(String[] args) &#123; System.out.println(10 &gt; 5 &amp;&amp; 20 &gt; 5); //true &amp;&amp; true → true System.out.println(10 &gt; 5 &amp;&amp; 5 &gt; 20); //true &amp;&amp; false → false System.out.println(5 &gt; 10 &amp;&amp; 20 &gt; 5); //false &amp;&amp; true → false System.out.println(5 &gt; 10 &amp;&amp; 5 &gt; 20); //false &amp;&amp; false → false //Dead code : 두 조건 중 조건1이 false 일때, 조건2가 무엇이든 false가 된다. System.out.println(10 &gt; 5 || 20 &gt; 5); //true || true → true System.out.println(10 &gt; 5 || 5 &gt; 20); //true || false → true //Dead code : 두 조건 중 조건1이 true 일때, 조건2가 무엇이든 true가 된다. System.out.println(5 &gt; 10 || 20 &gt; 5); //false || true → true System.out.println(5 &gt; 10 || 5 &gt; 20); //false || false → false &#125;//main()&#125;//class 6.대입연산자 대입연산자(=) : =(equal)은 같다라는 의미가 아니라 대입을 의미 ▶ 할당연산자 L-Value = R-Value : R-Value의 값(연산결과)을 L-Value에 대입(할당) 복합대입연산자 : R-Value에서 사용되는 변수와 L-Value에 대입(할당)되는 변수가 동일할 때 사용 a += b / a = a + b 과 동일 a -= b / a = a - b 과 동일 12345678910111213141516171819202122232425262728public class Operator06 &#123; public static void main(String[] args) &#123; int a = 10; //정수형 변수 a를 선언하고, 값(10)을 할당 → 초기화 System.out.println(\"a의 값 : \" + a); //10 int b = a; //정수형 변수 b를 선언하고, 값(변수 a의 값)을 할당 → 초기화 System.out.println(\"b의 값 : \" + b); //10 b = a + a; //재할당 System.out.println(\"b의 값 : \" + b); //20 a = a + a; //재할당 System.out.println(\"a의 값 : \" + a); //20 // a += a; //a = a + a; System.out.println(\"a의 값 : \" + a); //40 int x = 10; x = x + 100; System.out.println(\"x의 값 : \" + x); //110 int y = 10; y += 100; System.out.println(\"y의 값 : \" + y); //110 &#125;//main()&#125;//class 7. 3항연산자 3항연산자 : 3개의 항으로 구성 ▶ 조건식을 작성할 경우 많이 편리 조건식 ? &quot;참값&quot; : &quot;거짓값&quot;; 1234567891011121314151617public class Operator07 &#123; public static void main(String[] args) &#123; //3항 연산 int a = 10; String result = a == 10 ? \"맞다\" : \"틀리다\"; System.out.println(result); System.out.println(a == 10 ? \"맞다\" : \"틀리다\"); String str1 = \"100\"; //문자 100 if(str1 == \"100\") &#123; //숫자 100 → \"\" 추가 → 문자 100 System.out.println(\"맞습니다.\"); &#125; else &#123; System.out.println(\"틀립니다.\"); &#125;//if() &#125;//main()&#125;//class 특수기호문자(Escape Sequence) 특수기호문자(Escape Sequence) : 프로그램에서 사용되는 특수기호문자, 역슬래시(\\)를 먼저 입력하고 사용한다. ▶ 출력문에 많이 사용 \\t : 탭간격(기본 8칸 띄어쓰기) \\n : 줄바꿈(뉴라인) \\b : 백스페이스 \\r : 행의 처음으로 커서를 이동 \\&#39; : 작은따옴표를 표시 \\&quot; : 큰따옴표를 표시 \\\\ : \\(역슬래시, root) 표시 12345678910111213141516171819202122public class Operator08 &#123; public static void main(String[] args) &#123; System.out.println(\"1.HelloWorld\"); System.out.println(\"2.Hello\" + \"\\t\" + \"World\"); // \\t : 탭간격(기본 8칸) //글꼴에 따라 띄어 쓴 정도가 다름 System.out.println(\"3.Hello\\tWorld\"); //문자열 출력은 안에 연결해서 사용가능 System.out.println(\"4.Hello\" + \"\\n\" + \"World\"); // \\n : 줄바꿈(뉴라인) System.out.println(\"5.Hello\" + \"\\b\" + \"World\"); // \\b : 백스페이스 System.out.println(\"6.Hello\" + \"\\r\" + \"World\"); // \\r : Carriage Return // 6.Hello : 행의 처음으로 커서를 이동 // World // = Worldlo System.out.println(\"7.Hello\" + \"\\'\" + \"World\"); // \\' : 작은따옴표를 표시 System.out.println(\"8.Hello\" + \"\\\"\" + \"World\"); // \\\" : 큰따옴표를 표시 System.out.println(\"9.Hello\" + \"\\\\\" + \"World\"); // \\\\ : \\(역슬래시, root) 표시 System.out.println(\"번호\" + \"\\t\" + \"이름\" + \"\\t\" + \"주소\"); // 아래 내용들이 깔끔하게 출력 System.out.println(\"001\" + \"\\t\" + \"홍길동\" + \"\\t\" + \"광주시 서구 농성동\"); System.out.println(\"002\" + \"\\t\" + \"허준\" + \"\\t\" + \"광주시 남구 봉선동\"); &#125;//main()&#125;//class 16진수, 8진수 16진수 : 숫자 앞에 0x를 붙인다. 8진수 : 숫자 앞에 0을 붙인다. 12345678910111213public class Operator09 &#123; public static void main(String[] args) &#123; int a = 11; //10진수 System.out.println(a); int b = 011; //8진수 System.out.println(b); int c = 0x11; //16진수 System.out.println(c); &#125;//main()&#125;//class","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/tags/JAVA/"}]},{"title":"JAVA기초 02.형변환(Casting)","slug":"java02","date":"2019-04-05T09:56:37.000Z","updated":"2019-04-09T13:32:00.610Z","comments":true,"path":"2019/04/05/java02/","link":"","permalink":"https://ingjin.github.io/2019/04/05/java02/","excerpt":"","text":"형변환(Casting) 규칙 ========= UpCasting (자동형 변환, 묵시적 형변환) =========&gt; byte(1) → short/char(2) → int(4) → long(8) → float(4) → double(8) &lt;======== DownCasting (강제형 변환, 명시적 형변환) ======== 자동형 변환: 작은타입이 큰타입으로 자동으로 변환→ 묵시적 형변환, UpCasting 강제형 변환: 큰타입을 작은타입으로 강제적으로 변환→ 명시적 형변환, DownCasting, 일반적인 의미의 Casting 래퍼 클래스(Wrapper class) 래퍼 클래스(Wrapper class): 기본 타입에 해당하는 데이터를 객체로 이름 그대로 포장해 주는 클래스각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체로 만들어 준다. 예제 112345678910111213141516171819202122232425262728293031323334public class Casting01 &#123; public static void main(String[] args) &#123; int a = 10; //정수형 변수 a를 선언하고 값(10)을 할당 ▶ 초기화 double b; //실수형 변수 b를 선언만 한 상태 b = a; //변수a의 값을 b에 할당 //자동형 변환:작은타입(int)이 큰타입(double)으로 자동으로 변환 //→묵시적 형변환, UpCasting System.out.println(\"변수 a:\" + a); System.out.println(\"변수 b:\" + b); // 출력내에서 +는 더하기가 아니라 결합을 의미 int c; //정수형 변수 c를 선언만 한 상태 double d = 34.5;//실수형 변수 d를 선언하고 값(34.5)을 할당 ▶ 초기화 //c = d; //오류:큰타입(double)을 작은타입(int)에 할당 c = (int) d; //강제형 변환(double → int) //→명시적 형변환, DownCasting, 일반적인 의미의 Casting System.out.println(\"변수 c:\" + c); //출력값 : 34 → 0.5의 손실 발생 System.out.println(\"변수 d:\" + d); //출력값 : 34.5 int x = 129; byte y = (byte) x; //강제형 변환(int → byte) System.out.println(\"변수 x:\" + x); //출력값 : 128 System.out.println(\"변수 y:\" + y); //출력값 : -128 //byte(-128~127) 1이 남아서 -128부터 시작, //만약 x = 129였다면 -127이 된다. char i = 'A'; int j = i; //자동형 변환(char → int) System.out.println(\"변수 i:\" + i); //출력값 : A System.out.println(\"변수 j:\" + j); //출력값 : 65 → ASCII(UniCode) 코드값 System.out.println(\"변수 j:\" + (char)j); //출력값 : A ▶ 강제형 변환 (int → char) //주로 이러한 용도로 사용된다. &#125; //main&#125; //class 예제 212345678910111213141516public class Casting02 &#123; public static void main(String[] args) &#123; char upper = 'A'; char lower = 'a'; System.out.println(upper); //출력값 : A(65) System.out.println(lower); //출력값 : a(97) System.out.println(upper + lower); //출력값 : 162..? //대문자(upper)를 소문자로 바꾸어서 출력하시오. //System.out.println(upper + 32); ▶ 출력값 : 97 //System.out.println((char)upper + 32); (X) //출력값 : 97 → char + int → int 로 계산됨 System.out.println((char)(upper + 32)); //출력값 : a → upper + 32를 먼저 연산해준다. &#125;//main()&#125;//class 아래의 명령은 몇 번의 형변환이 발생하는가? 1double sum = 3.5F + 12; ① 3.5F + 12.0F // int → float ② double sum = 15.5F; // float → double 예제 312345678910111213141516171819202122232425public class Casting03 &#123; public static void main(String[] args) &#123; //String 클래스를 이용해 문자 10(su1)과 문자 20(su2)을 더하기 연산 String su1 = \"10\"; String su2 = \"20\"; System.out.println(su1 + su2); //출력값 : 1020 //문자는 Concatenation (연결,결합) int a = Integer.parseInt(su1); //변수 a에는 정수 10이 기억 ▶ Wrapper Class int b = Integer.parseInt(su2); //변수 b에는 정수 20이 기억 ▶ Wrapper Class System.out.println(a + b); //출력값 : 30 ▶ 숫자는 연산된다. System.out.println(Integer.parseInt(su1) + Integer.parseInt(su2)); //한번에 처리하는 식 String su3 = \"10.5\"; //double type로 변환 해줘야함 String su4 = \"20.3\"; //▶ Wrapper Class System.out.println(su3+su4); //출력값 : 10.520.3 double c = Double.parseDouble(su3); double d = Double.parseDouble(su4); System.out.println(c+d); //출력값 : 30.8 System.out.println(Double.parseDouble(su3)+Double.parseDouble(su4)); //한번에 처리하는 식 &#125; //main()&#125; //class","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/tags/JAVA/"}]},{"title":"JAVA기초 01.데이터타입","slug":"java01","date":"2019-04-03T09:56:37.000Z","updated":"2019-04-05T14:43:09.529Z","comments":true,"path":"2019/04/03/java01/","link":"","permalink":"https://ingjin.github.io/2019/04/03/java01/","excerpt":"","text":"기본용어 선언 변수의 형을 정의하는 것 1int a; char b; double c; 할당 값을 주는 것 1a = 1; b = 'A'; c = 12.5; 초기화 선언과 동시에 값을 주는 것 1int a = 1; char b = 'A' double c = 12.5; 나열 같은 데이터 타입일때 쭉 연결하는 것 1int a = 1, b = 2; 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 1int a = 1; → int a = 3; 변수 변수 데이터를 저장할 메모리 기억공간 기억공간에는 이름이 있어야 한다. ▶ 식별자 데이터를 담는 상자 : 크기 ▶ Data Type(자료형) ※ 변수 이름 작성 규칙 반드시 영문자 소문자로 시작 첫글자는 영문자, ‘_’, ‘$’으로만 시작 예약어(KeyWord)는 사용 불가 띄어쓰기는 사용할 수 없다 가급적이면 이름에 의미가 나타나도록 작성하자 자료형 자료형(Data Type) 변수의 크기와 저장해야 할 데이터의 종류를 결정 기본자료형(PDT): 기본 데이터 타입의 크기가 정해져있다.CPU나 운영체제에 따라 변경되지 않는다.정수형 : byte(1), short(2), int(4), long(8)실수형 : float(4), double(8)문자형(단일문자) : char(2)부울형(논리형) : boolean(1) 사용자정의 자료형(UDDP): 참조형 자료(Reference Type) → 4Byte클래스 타입인터페이스 타입배열(열거) 타입 예제 1 선언,할당,초기화 1234567891011121314151617181920212223public class Variable01 &#123; public static void main(String[] args) &#123; //정수 2개를 저장할 변수를 선언하시오.(변수명은 a.b) int a; //정수형 변수a를 선언 int b; //정수형 변수b를 선언 //int a,b; //같은 자료형의 변수를 나열(comma(,)구분) //변수 a에 10, 변수 b에 20을 할당하시오. a = 10; //변수 a에 값(10)을 할당(대입) b = 20; //변수 b에 값(20)을 할당(대입) //정수형 변수c와 d를 선언하고, c에 30,d에 40을 할당하시오. int c = 30; //선언과 동시에 값을 할당 ▶ 초기화 int d = 40; //선언과 동시에 값을 할당 ▶ 초기화 // int c = 30, d = 40; //같은 자료형의 변수를 초기화하고 나열 //각각의 변수에 저장된 데이터를 출력 System.out.println(\"a의 값:\" + a); System.out.println(\"b의 값:\" + b); System.out.println(\"c의 값:\" + c); System.out.println(\"d의 값:\" + d); &#125;//main()&#125;//class 예제 2 재할당 1234567891011121314151617public class Variable02 &#123; public static void main(String[] args) &#123; //정수형 변수 a와 b를 선언하고, a에 10, b에 20을 할당하시오. int a = 10; int b = 20; //변수 a와 b의 값을 출력 System.out.println(a); System.out.println(b); //a의 값을 30으로 b의 값을 40으로 변경하여 출력하시오 ▶ 재할당 a = 30; // a의 값이 10에서 30으로 변경(재할당) b = 40; // b의 값이 20에서 40으로 변경(재할당) System.out.println(a); System.out.println(b); &#125; //main&#125; //class 예제 3 정수형 byte,short,int,long 1234567891011121314151617public class Variable03 &#123; public static void main(String[] args) &#123; //정수형 데이터 타입 : byte, short, int, long byte b = 100; //1Byte (-128 ~ 127) System.out.println(\"변수 b:\" + b); short s = 1000; //2Byte (-32,768 ~ 32,767) System.out.println(\"변수 s:\" + s); int i = 1000000; //4Byte (-2,147,483,648 ~ 2,147,483,647) System.out.println(\"변수 i:\" + i); long l = 12345678900L; // long 타입은 숫자 뒤에 L, // 모든 정수타입 리터럴은 int형으로 처리하기 때문 System.out.println(\"변수 l:\" + l); &#125; //main()&#125; //class 예제 4 실수형 float,double 1234567891011121314public class Variable04 &#123; public static void main(String[] args) &#123; //실수형 데이터 타입 : float, double float f = 123.4567890123456789F; //4Byte double d = 123.4567890123456789; //8Byte System.out.println(\"변수 f:\" + f); //123.45679 //마지막 숫자 반올림해서 나옴 System.out.println(\"변수 d:\" + d); //123.45678901234568 //마지막 숫자 반올림해서 나옴 &#125;//main()&#125;//class 예제 5 문자형 char / 문자열 String 12345678910111213141516171819202122public class Variable05 &#123; public static void main(String[] args) &#123; //문자 데이터 타입 : char(2Byte) ▶ 하나의 글자만 저장 //값을 할당할 때는 작은따옴표를 사용한다. char a = 'A'; char b = '가'; char c = '★'; System.out.println(\"변수 a:\" + a); System.out.println(\"변수 b:\" + b); System.out.println(\"변수 c:\" + c); //---------------------------------- //String : 문자,문자열을 저장할 수 있는 클래스(→첫글자 대문자) //값을 할당할 때는 쌍따옴표를 사용한다. String str1 = \"ABC\"; String str2 = \"가나다\"; System.out.println(\"변수 str1:\" +str1); System.out.println(\"변수 str2:\" +str2); &#125;//main()&#125;//class 예제 6 논리형 boolean 12345678910public class Variable06 &#123; public static void main(String[] args) &#123; // 논리형(부울형):boolean(1byte)▶true,false 만 기억 boolean t = true; boolean f = false; System.out.println(\"변수 t:\" + t); System.out.println(\"변수 f:\" + f); &#125;&#125;","categories":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/categories/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://ingjin.github.io/tags/JAVA/"}]},{"title":"19년 4월 1주차 Today I Learned","slug":"1941","date":"2019-04-01T09:56:37.000Z","updated":"2019-04-05T14:19:05.217Z","comments":true,"path":"2019/04/01/1941/","link":"","permalink":"https://ingjin.github.io/2019/04/01/1941/","excerpt":"","text":"190401 TIL 국비과정 본과정 시작 19.04.01~19.09.30 09:20 ~ 18:00 (월~금) 사전학습때 했던거 복습 개발환경구축 ㅎ.. 수업 교재를 받았다. 정처기는 취득했기에 매물예정 190402 TIL 변수프로그램 실행중에 값을 임시저장 하기위한 공간 변수명 선언 규칙(Naming Convention) JAVA는 대소문자를 구분한다. 첫글자는 반드시 문자, _, $로만 시작된다. 지정된 단어(Keyword)는 사용할 수 없다. 변수의 이름은 소문자로 시작하고,단어와 단어를 연결하고자 할 경우,_를 이용하거나, 연결되는 단어의 첫글자를 대문자로 표시예 : sum_result, totalCount, salePrice 등 변수의 이름은 가능하면 의미를 알아볼 수 있도록 사용예 : userId, userPw 등 기본 데이터타입 논리타입 boolean (1Byte) true/false만 기억 문자타입 char (2Byte) 하나의 글자만 저장 정수타입 byte (1Byte)[-128 ~ 127] short (2Byte)[-32,768 ~ 32,767] int (4Byte)[기본형][-2,147,483,648 ~ 2,147,483,647] long (8byte)아무튼 큼, long 타입은 숫자 뒤에 `L`,`l` 실수타입 float (4Byte)숫자 뒤에 `F`,`f` double (8byte) [기본형] 190403 TIL 선언 변수의 형을 정의하는 것 할당 값을 주는 것 초기화 선언과 동시에 값을 주는 것 나열 같은 데이터 타입일때 쭉 연결하는 것 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 형 변환(Casting) 규칙====== UpCasting (자동형 변환, 묵시적 형변환) ======&gt;byte(1) → short(2)/ char(2) → int(4) → long(8) → float(4) → double(8)&lt;===== DownCasting (강제형 변환, 명시적 형변환) ===== 190404 TIL 연산주어진 식을 계산하여 결과를 얻어내는 과정 산술연산자: + , - , * , / , % %(나머지연산)이란?: 짝수/홀수, 배수의 판단에 사용(주로 조건식에서 사용) 증감연산자: ++(증가), --(감소) → 반복문에서 많이 사용 별도의 연산결과를 처리하지 않은 연산자 : 단항연산 연산자의 위치가 변수의 앞인지 뒤인지에 따라 결과가 다르다. 비트연산자: 개발자의 입장에서 비트를 직접 조작할 수 있다는 장점 → 하드웨어 제어현재는 자바에서 거의 사용하지 않는다. &amp;(AND): 모두 1일때 → 1출력 |(OR): 하나라도 1일때 → 1출력 ^(XOR): 서로 다를때 → 1출력 비교연산자: 조건식에 많이 사용, 연산의 결과는 true, false 반환 &gt;, &gt;=, &lt;, &lt;= : 수학의 연산과 같은 관계연산자(비교연산) a = b : 수학에서는 같다라는 의미이지만 프로그램에서는 할당(대입)연산자 a == b : 프로그램에서 같다라는 의미 a != b : 같지않다라는 의미 190405 TIL 3항연산자 : 3개의 항으로 구성된다. 조건식을 작성할 경우 편리하다. 조건식 ? &quot;참값&quot; : &quot;거짓값&quot;; 특수기호문자(Escape Sequence) : 출력문에서 많이 사용된다. 역슬래시()를 먼저 입력하고 사용한다. \\t : 탭간격(기본본 8칸 띄어쓰기) \\n : 줄바꿈(뉴라인) \\b : 백스페이스 \\r : Carriage Return \\&#39; : 작은따옴표를 표시 \\&quot; : 큰따옴표를 표시 \\\\ : (역슬래시, root) 표시 cmd에서 실행 16진수 : 숫자 앞에 0x를 붙인다.8진수 : 숫자 앞에 0을 붙인다. 단순 if문: 조건을 판단하여 참일 경우에만 실행 123if(조건식 : 비교연산자 또는 논리연산자가 들어가야함)&#123; 조건식이 참일때 실행되는 문장;&#125;//if 블럭 if문: 조건을 판단하여 참일때 또는 거짓일떄의 명령을 실행 if(조건식){ 참일때 실행되는 문장; //여기까지 하면 단순if } else{ 거짓일때 실행되는 문장; }//if_else","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"19년 3월 5주차 Today I Learned","slug":"190329","date":"2019-03-29T09:56:37.000Z","updated":"2019-03-31T13:08:19.925Z","comments":true,"path":"2019/03/29/190329/","link":"","permalink":"https://ingjin.github.io/2019/03/29/190329/","excerpt":"","text":"190325 TIL 국비과정 사전예습 시작 19.03.25~19.03.29 09:20 ~ 12:10 (월~금) 블로그에 Disqus를 연동이제 나도 댓글을 남길 수 있다. Disqus 연동 요약Disqus에 가입하여 shortname을 설정 한 뒤themes/note 경로의 _config.yml 에서#Disqus부분을 다음과 같이 수정한다. #Disqus disqus: enable: true shortname: ingjin #shortname 삽입 count: true lazyload: false 그렇다, 오늘은 별거 안했다. 190326 TIL Java 개발 환경 구축 JDK 설치 JAVA_HOME 환경 변수 생성 PATH 환경 변수 추가;%JAVA_HOME%\\bin; CLASSPATH 환경 변수 생성.;%JAVA_HOME%\\lib; CLASSPATH? 컴퓨터 어딘가에 존재하는클래스 파일을 사용하기 위한 방법. 미지정시 현재 디렉토리에서만필요한 클래스를 가져다 쓴다. 코드블럭 라인넘버가 나온다.어제는 왜 안나온거지..?function add(x, y) { return x + y } 190327 TIL 예비군 기본훈련 다녀왔습니다. Markdown 이미지 크기 조절&lt;img&gt;태그가 더 편한것 같은 이 느낌 &lt;img src=\"이미지 url\" width=\"원하는 크기\"&gt; width=&quot;800&quot; width=&quot;400&quot; 사실 마크다운으로 수정하면자꾸 엑박이 뜬다..이유가 뭘까..? 190328 TIL java파일을 컴파일하면class파일이 생성된다. 컴파일코드를 컴퓨터가 읽을 수 있도록 변환하는 과정. 패키지서로 관련이 있는 클래스 또는 인터페이스들을하나로 묶어 놓은 묶음. syso 입력 후 ctrl+space= System.out.println() 생성 190329 TIL 이클립스(Eclipse)에서프로젝트를 불러오는 방법= Import하는 방법 헝가리안 표기법 변수 및 함수의 인자 이름 앞에데이터 타입을 명시하는 코딩 규칙 요즘 안쓴다고 한다. 사전학습이 끝났다.생각해보니 뭐 안했다.","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"19년 3월 4주차 Today I Learned","slug":"190324","date":"2019-03-23T15:00:00.000Z","updated":"2019-03-30T14:04:11.291Z","comments":true,"path":"2019/03/24/190324/","link":"","permalink":"https://ingjin.github.io/2019/03/24/190324/","excerpt":"","text":"190323 TIL 초보몽키님의 블로그를 참고하여나도 Today I Learned (TIL)을본격적으로 시작해 보려고 한다. HTML,CSS,JavaScript 모르는 상태에서구글링하면서 Hexo블로그를 만들어 보았다.TIL을 여기서 할 지 티스토리에서 할 지 고민 중 _config.yml파일을 수정하는 방법을 알았다. Notepad++를 사용한다. 190324 TIL Hueman에서 nexT로 갈아탔다. 간단한 Markdown문법을 배웠다.Markdown Editor는 Marp를 써보려고 한다. Markdown이미지 업로드 꿀팁 이미지가 올라와서 행복한 개구리 :)","categories":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/categories/TIL/"}],"tags":[{"name":"TIL","slug":"TIL","permalink":"https://ingjin.github.io/tags/TIL/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-03-22T07:28:05.567Z","updated":"2019-03-22T07:28:05.567Z","comments":true,"path":"2019/03/22/hello-world/","link":"","permalink":"https://ingjin.github.io/2019/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}