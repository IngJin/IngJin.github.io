<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JAVA기초 07. 배열(Array)]]></title>
    <url>%2F2019%2F04%2F27%2Fjava07%2F</url>
    <content type="text"><![CDATA[배열(ARRAY)이란?인덱스와 인덱스에 대응하는 데이터들로 이루어진 자료구조배열에는 같은 종류의 데이터들이 순차적으로 저장하는 공간배열의 접근은 반드시 요소번호(index)로 접근하며, index는 0부터 시작배열을 이용하면 한번에 많은 메모리 공간 선언 가능반복문을 이용하여 처리하기에 가장 적합한 자료구조 배열 선언 및 생성배열선언과 배열생성의 두단계 필요 배열 선언 후 배열 생성 12int[] intArray; intArray = new int[10]; 배열 선언 및 생성 1int[] intArray = new int[10]; 배열의 초기화배열이 생성되면서 원소의 값이 초기화됨 1int[] intArray = &#123;10,20,30&#125;; 인덱스인덱스는 배열의 위치에서부터 데이터가 저장되어 있는 상대적인 위치배열의 마지막 항목의 인덱스는 배열크기 -1인덱스는 0부터 시작, 정수타입만 가능 배열의 크기배열의 크기는 배열의 length라는 필드에 저장되어 있다.배열명.length 배열 예제예제1-1배열을 선언하고 생성한 후, 나중에 내용물(원소값)을 채우는 방식 1234567891011121314151617181920212223242526public class Ex_Array01 &#123; public static void main(String[] args) &#123; //정수를 저장할 배열(arr)을 선언하고 //저장할 배열의 크기(길이)를 3으로 생성하고 //모든 요소에 10을 할당하고 출력하시오. int[] arr; //정수형 배열 arr을 선언 : int arr[]; (권장하지않음) arr = new int[3]; //배열의 생성 //int[] arr = new int[3]; 배열의 선언 및 생성 - (실제로는 이런식으로 쓰자) arr[0] = 10; //배열(arr)의 0번지(index)에 10을 할당 arr[1] = 10; //배열(arr)의 1번지(index)에 10을 할당 arr[2] = 10; //배열(arr)의 2번지(index)에 10을 할당 System.out.println("arr[0]의 값 : " + arr[0]); //배열(arr)의 0번지(index)에 10을 출력 System.out.println("arr[1]의 값 : " + arr[1]); //배열(arr)의 1번지(index)에 10을 출력 System.out.println("arr[2]의 값 : " + arr[2]); //배열(arr)의 2번지(index)에 10을 출력 System.out.println(arr); //출력값 : [I@7852e922 //배열이(arr)이 참조하는 메모리의 해시코드 값을 출력(16진법) &#125;//main()&#125;//class 예제1-2123456789101112131415161718192021222324252627282930313233public class Test_Array &#123; public static void main(String[] args) &#123; //정수 3개를 저장할 배열(arr1)을 선언 및 생성하고 //모든 요소에 10을 할당하고 출력하시오. int[] arr1 = new int[3]; for (int i = 0; i &lt; arr1.length; i++) &#123; arr1[i] = 10; // 배열 arr1[i] 번지[index]에 10을 할당 System.out.println("arr[" + i + "]의 값 : " + arr1[i]); // 배열arr1[i] 번지의 값을 출력 &#125; // for //정수 3개를 저장할 배열(arr2)을 선언 및 생성하고 //각각의 요소에 10,20,30,을 할당하고 출력하시오. int[] arr2 = new int[3]; int sum = 0; for (int i = 0; i &lt; arr2.length; i++) &#123; sum += 10; arr2[i] = sum; // 배열 arr2[i] 번지[index]에 10을 할당 System.out.println("arr[" + i + "]의 값 : " + arr2[i]); // 배열arr1[i] 번지의 값을 출력 &#125; // for /* int[] arr2 = new int[3]; for (int i = 0; i &lt; arr2.length; i++) &#123; arr2[i] = (i + 1)*10; System.out.println("arr[" + i + "]의 값 : " + arr2[i]); &#125;//for */ &#125;// main()&#125;// class 예제2배열을 선언하는 동시에 배열안의 내용물(원소값)을 같이 채우는 방식 12345678910111213141516public class Ex_Array &#123; public static void main(String[] args) &#123; //정수 3개를 저장할 배열(arr)을 선언하고 //동시에 모든요소에 10을 할당하시오 ▶ 초기화 int[] arr = &#123;10, 10, 10&#125;; //배열 arr을 선언하고 바로 값을 할당 //배열(arr)의 모든 요소의 합(sum)을 구하여 출력하시오 int sum = 0; //sum = arr[0] + arr[1] + arr[2]; for (int i = 0; i &lt; arr.length; i++) &#123; sum += arr[i]; //sum = sum + arr[i]; &#125; System.out.println("배열(arr)의 총합 : " + sum); System.out.println("배열(arr)의 크기(길이) : " + arr.length); &#125;//main()&#125;//class 예제31234567891011121314151617181920212223import java.util.Arrays;public class Test_Array &#123; public static void main(String[] args) &#123; //초기화된 배열(arr)에서 홀수의 합(oddSum)과 짝수의 합(evenSum)을 구하여 출력 int[] arr = &#123;1,4,5,8,3,7,9,2,6&#125;; //배열(arr)을 선언하고 동시에 값을 할당 : 초기화 int oddSum = 0, evenSum = 0; //결과가 저장될 변수를 초기화 for(int i = 0 ; i &lt; arr.length ; i++) &#123; if(arr[i] % 2 == 1) &#123; oddSum += arr[i]; &#125;else &#123; evenSum += arr[i]; &#125;//if-else &#125;//for System.out.println("배열(arr)의 원소(요소)값 : " + Arrays.toString(arr)); System.out.println("홀수의 합 :" + oddSum); System.out.println("짝수의 합 :" + evenSum); &#125;//main()&#125;//class 2차원배열2차원배열의 lengthi.length 2차원 배열의 행의 개수로서 2i[j].length 2차원배열 예제예제112345678910111213141516171819202122232425262728public class Ex_Array03 &#123; public static void main(String[] args) &#123; // 2행 3열의 정수형 2차원 배열(arr)을 선언 및 생성하고 // 모든요소에 10을 할당하고 출력 int[][] arr = new int[2][3]; // 2행 3열의 정수형 배열을 선언 및 생성 /* arr[0][0] = 10; arr[0][1] = 10; arr[0][2] = 10; arr[1][0] = 10; arr[1][1] = 10; arr[1][2] = 10; */ //ctrl + shift + / 주석씌우기 (\ 주석벗기기) for (int i = 0; i &lt; arr.length; i++) &#123; //arr.length : 2 for (int j = 0; j &lt; arr[i].length; j++) &#123; //arr[i].length : 3 arr[i][j] = 10; System.out.println("arr["+i+"]["+j+"]의 값 : " + arr[i][j]); &#125; System.out.println(); //행 띄어쓰기 &#125;//for &#125;//main()&#125;//class 예제2123456789101112131415161718192021222324252627282930313233343536373839public class Test_Array03 &#123; public static void main(String[] args) &#123; /* ＃비정방형(가변길이) 배열을 이용한 별찍기 ★ ★★ ★★★ ★★★★ ★★★★★ */ int[][] star = new int [5][]; //가변길이 배열(star)이 생성, 행이 다섯개 //방법 1 /* star[0] = new int[1]; //첫번째 행의 열의 길이 생성(1열) star[1] = new int[2]; //두번째 행의 열의 길이 생성(2열) star[2] = new int[3]; //세번째 행의 열의 길이 생성(3열) star[3] = new int[4]; //네번째 행의 열의 길이 생성(4열) star[4] = new int[5]; //다섯번째 행의 열의 길이 생성(5열) */ //방법2 /* for (int i = 0; i &lt; star.length; i++) &#123; star[i] = new int[i+1]; &#125; */ for (int i = 0; i &lt; star.length; i++) &#123; star[i] = new int[i+1];//방법3 (방법2쓸거면 지워야한다.) for (int j = 0; j &lt; star[i].length; j++) &#123; // System.out.print("★"); //이렇게해도 나오긴함 star[i][j]= '★'; System.out.print((char)star[i][j]); &#125;//for_j System.out.println(); &#125;//for_i &#125;//main()&#125;//class swap(교환)기존의 a의 값을 저장할 임시변수를 선언하고 a를 할당변수 a에 b의 값을 재할당변수 b에 temp값을 재할당 123int temp = a; a = b; b = temp; swap 예제예제1123456789101112131415161718public class Ex_Swap &#123; public static void main(String[] args) &#123; //swap(교환) : 기본 데이터 타입(PDT), 배열(Array) int a = 10; int b = 20; System.out.println("교환전 : a = " + a + ", b = " + b); //a와 b의 값을 교환하여 출력하시오. //System.out.println("교환후 : a = " + b + ", b = " + a); //교환이 아니라 출력순서를 바꾼것 int temp = a; //기존의 a의 값을 저장할 임시변수를 선언하고 a를 할당 a = b; //변수 a에 b의 값을 재할당 b = temp; //변수 b에 temp값을 재할당 System.out.println("교환후 : a = " + a + ", b = " + b); &#125;//main()&#125;//class 예제2123456789101112131415161718192021222324252627282930313233343536373839404142434445import java.util.Arrays;public class Ex_Swap_Array &#123; public static void main(String[] args) &#123; // 배열(arr1)에 저장된 데이터를 출력 int[] arr1 = &#123;1,2,3,4,5&#125;; System.out.println("arr1 배열의 값 : " + Arrays.toString(arr1)); //[1, 2, 3, 4, 5] System.out.print("arr1 배열의 값 : "); for (int i = 0; i &lt; arr1.length; i++) &#123; System.out.print(arr1[i] + " "); //1 2 3 4 5 &#125; System.out.println(); System.out.print("arr1 배열의 값 : ["); for (int i = 0; i &lt; arr1.length; i++) &#123; if(i != arr1.length -1) &#123; System.out.print(arr1[i] + ", "); &#125;else &#123; System.out.print(arr1[i] + "]\n"); //[1, 2, 3, 4, 5] &#125;//if &#125;//for //배열(arr1)에 저장된 데이터를 역순으로 출력 int[] arr2 = new int[arr1.length]; //임시 배열을 선언 및 생성 arr2[0] = arr1[4]; //arr1[arr1.length -1]; arr2[1] = arr1[3]; //arr1[arr1.length -2]; arr2[2] = arr1[2]; //arr1[arr1.length -3]; arr2[3] = arr1[1]; //arr1[arr1.length -4]; arr2[4] = arr1[0]; //arr1[arr1.length -5]; System.out.println("arr2 배열의 값 : " + Arrays.toString(arr2)); //[5, 4, 3, 2, 1] //배열(arr1)에 저장된 데이터를 역순으로 출력 int[] arr3 = new int[arr1.length]; int index = arr1.length - 1; //index : 4 for (int i = 0; i &lt; arr3.length; i++) &#123; arr3[i] = arr1[index--]; //4 3 2 1 0 &#125; System.out.println("arr3 배열의 값 : " + Arrays.toString(arr3)); //[5, 4, 3, 2, 1] &#125;//main()&#125;//class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 4월 4주차 Today I Learned]]></title>
    <url>%2F2019%2F04%2F22%2F1944%2F</url>
    <content type="text"><![CDATA[190422 TIL DB 오라클/SQL: DDL(Date Definition Language)create, alter, drop, truncate, rename 데이터타입 : 숫자, 문자, 날짜 숫자 : number, number(n), number(n,p) 문자 : char(n), varchar2(n) 날짜 : date - 년월일시분초 DB 오라클/SQL: 무결성 제약조건(Integrity Constraint)not null, check, unique, primary key, foreign key 객체지향적 프로그래밍: 프로그램을 실제 세상에 가깝게 모델링컴퓨터가 수행하는 작업을 객체들간의 상호 작용으로 표현 190423 TIL DB 오라클/SQL: foreign key: 외래키, fk, 참조키다른 테이블과의 관계(부모ㆍ자식간의 관계)를 갖는다.부모테이블의 pk인 컬럼을 참조한다. DTO 선언 멤버변수(상태정보) 선언 : 정보은닉 ▶ private 디폴트 생성자 메소드 생성자 메소드 초기화 : 자동완성 입력(Setter)&amp;출력(Getter) : 자동완성 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class PersonDTO &#123; private String name; //이름 private int age; //나이 private float height; //키 private float weight; //몸무게 private char gender; //성별 //2. 디폴트 생성자 메소드 public PersonDTO() &#123;&#125; //3. 생성자 메소드 초기화 : 자동완성 public PersonDTO(String name, int age, float height, float weight, char gender) &#123; super(); this.name = name; this.age = age; this.height = height; this.weight = weight; this.gender = gender; &#125; //4. 입력(Setter) &amp; 출력(Getter) : 자동완성 public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public float getHeight() &#123; return height; &#125; public void setHeight(float height) &#123; this.height = height; &#125; public float getWeight() &#123; return weight; &#125; public void setWeight(float weight) &#123; this.weight = weight; &#125; public char getGender() &#123; return gender; &#125; public void setGender(char gender) &#123; this.gender = gender; &#125; &#125; 190424 TIL DB 오라클/SQL: view :실제 데이터를 가지고 있지는 않고 테이블이 가지고 있는 데이터를 접근하여 사용한다. view를 사용하는 목적 보안: data access 복잡한 쿼리문을 쉬운 쿼리문으로 사용할 수 있도록 하기위해 사용 190425 TIL DB 오라클/SQL: sequence : 시퀀셜한 숫자를 만들어내는 기능을 가진 object 123456생성create sequence 시퀀스명start with 시작값increment by 증감치nocyclenocache; DB 오라클/SQL: PL/SQL : 익명 블럭 123456declare 선언부 : 변수선언begin 실행부 : 쿼리문,대입문,조건문,반복문 예외처리부 : exception when ~ then ~end; 상속(inheritance): 상위클래스의 특성(필드,메소드)을 하위 클래스에 물려주는 것 슈퍼클래스(superclass): 특성을 물려주는 상위 클래스 서브클래스(subclass): 특성을 물려받는 하위클래스 190426 TIL 상속(Inheritance): 상위클래스로부터 하위클래스가 물려 받는다.+상태정보(DTO) : 멤버변수/필드, 행위정보(DAO) : 메소드상속받은 하위클래스에서 상태정보, 행위정보의 추가/수정 가능extends 키워드를 활용한다 : public class A extends B ▶ A(자식) → B(부모)]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 06-2. Scanner 응용]]></title>
    <url>%2F2019%2F04%2F21%2Fjava06b%2F</url>
    <content type="text"><![CDATA[주사위게임출력예시1234567891011121314151617181920게임시작 : 1, 게임종료 : -1 ▶5숫자를 잘못입력하셨습니다.게임시작 : 1, 게임종료 : -1 ▶-1게임을 종료합니다!게임시작 : 1, 게임종료 : -1 ▶1사용자가 주사위를 굴립니다.Enter Key를 입력하세요!사용자의 숫자는 5입니다.컴퓨터가 주사위를 굴립니다.Enter Key를 입력하세요!컴퓨터의 숫자는 2입니다.You Win!!!컴퓨터의 숫자는 3입니다.Draw--컴퓨터의 숫자는 5입니다.You Lose.. 소스코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import java.util.Random;import java.util.Scanner;public class DiceGame &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); //입력을 받기위한 객체 생성 Random random = new Random(); //무작위로 숫자를 할당하기 위한 객체를 생성 while(true) &#123; System.out.print("게임시작 : 1, 게임종료 : -1 ▶"); //int useInput = sc.nextLine(); //타입 미스매칭 //String useInput = sc.nextLine(); // 아래에서 성립X int useInput = Integer.parseInt(sc.nextLine()); //1입력 후 엔터를 입력했을 때 엔터까지 가져오기 위해서 ▶ wrapperclass //1,-1이외의 숫자가 입력되면 오류메세지 출력하고 재입력 if(useInput != 1 &amp;&amp; useInput != -1) &#123; //1도 아니고 -1도 아닐떄 System.out.println("숫자를 잘못입력하셨습니다."); continue; &#125;//if //-1이 입력되면 게임을 종료(while문을 탈출) if(useInput==-1) &#123; System.out.println("게임을 종료합니다!"); break; &#125;//if //사용자의 숫자를 무작위로 할당 System.out.println("사용자가 주사위를 굴립니다."); System.out.println("Enter Key를 입력하세요!"); sc.nextLine(); int userNumber = random.nextInt(6) + 1; System.out.println("사용자의 숫자는 " + userNumber + "입니다."); //컴퓨터의 숫자를 무작위로 할당 System.out.println("컴퓨터가 주사위를 굴립니다."); System.out.println("Enter Key를 입력하세요!"); sc.nextLine(); int comNumber = random.nextInt(6) + 1; System.out.println("컴퓨터의 숫자는 " + comNumber + "입니다."); //사용자의 숫자(userInput)와 컴퓨터의 숫자(comInput)를 비교해서 결과를 출력 if(userNumber &gt; comNumber) &#123; System.out.println("You Win!!!"); &#125;else if(userNumber &lt; comNumber) &#123; System.out.println("You Lose.."); &#125;else &#123; System.out.println("Draw--"); &#125;//if &#125;//while sc.close(); &#125;//main&#125;//class 숫자비교게임출력예시123456789101112131415161718192021221부터 100사이의 정수값을 입력하세요 : 50더 큰 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 75더 작은 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 65더 작은 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 58더 작은 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 55더 큰 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 57더 작은 수를 입력하세요.1부터 100사이의 정수값을 입력하세요 : 56맞췄습니다!시도횟수는 7번 입니다. 소스코드123456789101112131415161718192021222324252627282930313233import java.util.Random;import java.util.Scanner;public class HighLowGame &#123; public static void main(String[] args) &#123; // 1~100 사이의 임의의 정수값을 할당하여 comNumber에 저장 ▶ Random Random random = new Random(); // Random 객체를 생성 int comNumber = random.nextInt(100) + 1; // 1~100 사이의 임의의 정수값을 할당 // 사용자로부터 숫자를 입력받기위한 준비 ▶ Scanner Scanner sc = new Scanner(System.in); // Scanner 객체를 생성 int userNumber = 0; // 사용자가 입력한 값을 저장할 변수를 초기화 int count = 0; // 시도횟수를 저장할 변수를 초기화 do &#123; System.out.println("1부터 100사이의 정수값을 입력하세요 : "); // userNumber = sc.nextInt(); userNumber = Integer.parseInt(sc.nextLine()); count++; if (comNumber &gt; userNumber) &#123; System.out.println("더 큰 수를 입력하세요."); &#125; else if (comNumber &lt; userNumber) &#123; System.out.println("더 작은 수를 입력하세요."); &#125; else &#123; System.out.println("맞췄습니다!"); System.out.println("시도횟수는 " + count + "번 입니다."); break; &#125; &#125; while (true); sc.close(); &#125;// main()&#125;// class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 06. Scanner 클래스]]></title>
    <url>%2F2019%2F04%2F20%2Fjava06%2F</url>
    <content type="text"><![CDATA[Scanner 클래스란?자바에서 입력을 받을 때 사용하는 클래스정수,실수,문자열을 읽어올 수 있다. Scanner의 사용법 import를 통한 외부 클래스 호출 1import java.util.Scanner; Scanner 객체 생성 1Scanner sc = new Scanner(System.in); Scanner 닫기 1sc.close(); Scanner의 메소드 next() : 공백 이전의 문자열 받기 nextInt() : 공백 이전의 정수 받기 nextDouble() : 공백 이전의 실수 받기 nextLine() : 문자열 전체 입력 받기 예제예제1123456789101112131415161718192021222324252627282930313233343536import java.util.Scanner;public class Ex_scanner &#123; public static void main(String[] args) &#123; //입력창에서 점수(a)를 입력받은 후 학점을 출력하는 프로그램 //▶ Scanner(입력),if(학점) //Scanner 객체 생성 : new Scanner(); → System.in : 키보드로부터 입력 Scanner sc = new Scanner(System.in); while(true) &#123; //무한반복을 위해서 System.out.print("점수를 입력하세요."); //블럭킹 상태 : 키보드로부터 입력을 대기하는 상태 int a = sc.nextInt(); System.out.println("입력하신 점수는 " + a +"점 입니다."); if(a &gt;= 0 &amp;&amp; a &lt;= 100) &#123; if(a &gt;= 90) &#123; System.out.println("A학점입니다."); &#125;else if (a &gt;= 80) &#123; System.out.println("B학점입니다."); &#125;else if (a &gt;= 70) &#123; System.out.println("C학점입니다."); &#125;else if(a &gt;= 80) &#123; System.out.println("D학점입니다."); &#125;else &#123; System.out.println("F학점입니다."); &#125;//if break; &#125;else &#123; System.out.println("점수를 잘못입력하셨습니다."); continue; &#125;//if &#125;//while sc.close(); &#125;//main&#125;//class 예제2123456789101112131415161718192021222324252627282930import java.util.Scanner;public class Test_scanner &#123; public static void main(String[] args) &#123; // 사용자로부터 출력하고 싶은 구구단을 입력(dan)받는다. ▶ Scanner // 입력받은 단의 구구단을 출력▶반복문(for) // 단, 입력받은 단의 범위는 2단부터 9단까지이며 ▶ if // 그외의 단이 입력되면 오류메세지를 출력하고 재입력받는다. while, continue Scanner sc = new Scanner(System.in); while (true) &#123; System.out.print("출력하고 싶은 단를 입력하세요."); //블럭킹 int dan = sc.nextInt(); System.out.println(dan + "단을 츌력합니다."); if ( 0 &lt; dan &amp;&amp; dan &lt; 10) &#123; for (int i = 1; i &lt;= 9; i++) &#123; if (dan * i &lt; 10) &#123; System.out.println(dan + "X" + i + "=0" + (dan*i)); &#125; else &#123; System.out.println(dan + "X" + i + "=" + (dan*i)); &#125;//if &#125;//for break; //while문 탈출용 &#125; else &#123; System.out.println("2~9사이의 단수를 입력하세요."); &#125;//if &#125; // while sc.close(); //while 뒤 스캐너를 닫는것 &#125;// main&#125;// class 예제3123456789101112131415161718192021import java.util.Scanner;public class Test_scanner_operator &#123; public static void main(String[] args) &#123; //두 수를 입력(su1,su2)받은 후에, 사칙연산을 수행하고 결과를 출력 Scanner sc = new Scanner(System.in); System.out.print("첫 번째 수를 입력하세요 : "); int su1 = Integer.parseInt(sc.nextLine()); System.out.print("두 번쨰 수를 입력하세요 : "); int su2 = Integer.parseInt(sc.nextLine()); sc.close(); System.out.println("첫 번째 수 : " + su1); System.out.println("두 번쨰 수 : " + su2); System.out.println("덧셈의 결과 :" + (su1 + su2)); System.out.println("뺼셈의 결과 :" + (su1 - su2)); System.out.println("곱셈의 결과 :" + (su1 * su2)); System.out.println("나눗셈의 결과 :" + (su1/su2)); //나눗셈은 실수로 나올 수 있다. System.out.println("나눗셈의 결과 :" + (double)(su1/su2)); &#125;//main()&#125;//class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 4월 3주차 Today I Learned]]></title>
    <url>%2F2019%2F04%2F15%2F1943%2F</url>
    <content type="text"><![CDATA[190415 TIL DB 오라클/SQL: outer join, self join Method(메소드): 객체(클래스)가 가지고 있는 행위정보를 표현하는 것(동작, 기능) → 함수(Function) 동작(행위)를 만들어 놓고 필요할 때 사용하기 위해서 호출(Calling) 캡슐화의 원칙 : 클래스 안에 메소드를 구현, 하나의 클래스 안에는 여러개의 메소드가 존재 123456789101112131415public class Ex_Method01 &#123; //getSum() 메소드에 10과 20을 매개변수로 보내는 호출문 작성 public static void main(String[] args) &#123; int a = 10, b =20; //getSum()메소드를 보낼 매개변수를 초기화 getSum(a,b); //getSum()메소드 호출문 → 실인수 &#125;//main() //2개의 정수를 매개변수로 받아 합(sum)을 구하여 출력하는 메소드(getSum())를 정의 public static void getSum(int a, int b) &#123; //getSum()메소드를 정의 → 가인수 int sum = a + b; System.out.println("첫 번째 인수 : " + a); System.out.println("두 번째 인수 : " + b); System.out.println("두 인수의 합 : " + sum); &#125;//getSum()&#125;//class 190416 TIL DB 오라클/SQL: 국제표준 조인형식 : ANSI JOIN 형식 equi join : inner join outer join : `left/right outer join 예외(exception): 실행 중 발생하는 에러는 컴파일러가 알 수 없다.실행중 에러 발생 시 예외를 발생시켜 예외 처리함(예외를 처리하지 않으면 예외가 발생한 프로그램은 강제 종료) 예외처리문: try-catch-finally문 사용finally는 생략가능 190417 TIL DB 오라클/SQL서브쿼리문: 쿼리문 내에 있는 또 다른 쿼리문 단일행 서브쿼리: 서브쿼리의 결과데이터행이 단일행인 경우 다중행 서브쿼리: 서브쿼리의 결과데이터행이 다중행인 경우 다중컬럼 서브쿼리: 서브쿼리의 결과컬럼이 다중컬럼인 경우 예외(exception) throw : 강제로 예외를 발생시킨다→ catch 블럭으로 예외를 던질때 사용 throws: 예외를 처리하는 방법→ 예외 회피(예외 미루기) ▶ 메소드 선언부에서 사용 190418 TIL DB 오라클/SQL: DML(Data Manipulation Language) : insert, update, delete: TCL(Transaction Control Language) : commit, rollback 금일 자바수업 X 190419 TIL ascSort(): 정수형 배열의 원소값을 오름차순으로 정렬하여 출력 descSort(): 정수형 배열의 원소값을 내림차순으로 정렬하여 출력 순차검색(Sequence Search): 데이터를 처음부터 끝까지 검색하는 방법 ▶ 데이터가 소량일 경우 이진검색(Binary Search): 찾고자 하는 데이터를 중앙에 위치한 중간값과 비교하는 방법 ▶ low, middle, high 값을 사용]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 05. 반복문]]></title>
    <url>%2F2019%2F04%2F11%2Fjava05%2F</url>
    <content type="text"><![CDATA[반복문이란?일정한 조건까지 문장을 반복적으로 실행순환문, Loop문이라고도 한다.종류는 for문, while문, do~while문 for문for문 : 주로 반복횟수를 알고 있을때 사용 초기값이 조건식을 만족하여 참일 경우에 실행 후 증감식에 의해 초기값이 변경되고 다시 조건식과 비교하여 참일 경우 실행 또 증감식에 의해 초기값이 변경되고 조건식과 비교하여 거짓일 경우 for문을 종료 123for(초기값(시작값) ; 조건식(최종값) ; 반복후작업(증감값)) &#123; 실행문(반복할 문장);&#125; 예제1-11234567891011121314151617181920212223242526272829303132public class For &#123; public static void main(String[] args) &#123; //0부터 10까지 출력하시오. for(int i = 0 ; i &lt;= 10 ; i++) &#123; //0부터 10까지 1씩증가(반복) System.out.println(i); //값을 출력 &#125;//for System.out.println(); // 줄내려쓰기 //0부터 10까지의 수 중에서 짝수만 출력 : for for(int i = 0 ; i &lt;=10 ; i += 2) &#123; //i는 지역변수라서 중복되어도 상관 없다. System.out.println(i); &#125;//for System.out.println(); //0부터 10까지의 수 중에서 짝수만 출력 : for, if for(int i = 0 ; i &lt;= 10 ; i++) &#123; if(i % 2 == 0) &#123; System.out.println(i); &#125;//if &#125;//for System.out.println(); //10부터 0까지 출력 for(int i = 10 ; i &gt;= 0 ; i--) &#123; System.out.println(i); &#125;//for &#125;//main()&#125;//class 예제1-21234567891011public class For &#123; public static void main(String[] args) &#123; // 1부터 10까지의 누적합(sum)을 구하시오 int sum = 0; //누적합(결과)이 저장될 변수(sum)를 초기화 for(int i = 1 ; i &lt;= 10 ; i++) &#123; sum += i; // sum = sum + i; System.out.println("i값 : " + i + ", sum 값 : " + sum); &#125;//for System.out.println("누적합 : " + sum); &#125;//main()&#125;//class 예제2-112345678910public class For &#123; public static void main(String[] args) &#123; // 1부터 10까지의 수 중에서 홀수만 출력 : for(반복), if(홀수판단) ▶ 한줄로 출력 for(int i = 1 ; i &lt;= 10 ; i++) &#123; if(i % 2 == 1) &#123; //(i % 2 != 0) System.out.print(i + "\t"); &#125;//if &#125;//for &#125;//main()&#125;//class 예제2-212345678910111213public class For &#123; public static void main(String[] args) &#123; // 1부터 100까지 수 중에서 홀수의 누적합(oddSum)을 구하여 출력 //: for(반복), if(홀수 판단) int oddSum = 0; // 누적합(결과)이 저장될 변수(oddSum)를 초기화 for(int i = 1 ; i &lt;= 100 ; i++) &#123; // 1부터 100까지 1씩 증가(반복) if(i % 2 == 1) &#123; // 홀수이면 (i % 2 != 0) oddSum += i; // 홀수 누적합을 계산 (oddSum = oddSum + i;) &#125;//if &#125;//for System.out.println("홀수의 누적합 : " + oddSum); &#125;//main()&#125;//class 예제3-11234567891011121314151617181920public class For &#123; public static void main(String[] args) &#123; //1부터 100까지의 수 중에서 홀수의 합(oddSum)과 짝수의 합(evenSum)을 출력 //홀수의 개수(oddCnt)와 짝수의 개수(evenCnt)를 출력 //for(반복),if(조건) int oddSum = 0, evenSum = 0; //결과가 저장될 변수를 초기화 int oddCnt = 0, evenCnt = 0; for(int i = 1 ; i &lt;= 100 ; i++) &#123; //1부터 100까지 1씩 증가시키면서 반복 if(i % 2 == 1) &#123; //홀수이면(i % 2 != 0) oddSum += i; //홀수 누적합 계산(oddSum = oddSum + i) oddCnt++; //홀수 누적 개수를 증가(oddCnt += 1;) &#125;else &#123; //짝수이면 evenSum += i; //짝수 누적합 계산 evenCnt++; //짝수 개수를 증가 &#125;//if &#125;//for System.out.println("홀수의 누적합 : " + oddSum + ", 홀수의 개수 : " + oddCnt); System.out.println("짝수의 누적합 : " + evenSum + ", 짝수의 개수 : " + evenCnt); &#125;//main()&#125;//class 예제3-212345678910111213141516171819202122232425262728293031323334public class For &#123; public static void main(String[] args) &#123; // 1부터 100까지의 수 중에서 3의 배수의 누적합(sum)과 3의 배수의 개수(cnt)를 출력 int sum = 0, cnt = 0; for(int i = 1 ; i &lt;= 100 ; i++) &#123; if(i % 3 == 0) &#123; sum += i; cnt++; &#125;//if &#125;//for System.out.println("누적합 : " + sum); System.out.println("배수의 개수 : " + cnt); //1부터 100까지의 수 중에서 3의 배수를 출력하시오 //단, 한줄에 10개의 값을 출력하시오. int count = 0; for(int i = 1 ; i &lt;= 100 ; i++) &#123; if(i % 3 == 0) &#123; if(i &lt; 10) &#123; System.out.print("0" + i + "\t"); // 10보다 작은 3,6,9에 0을 붙여서 자리수를 맞춰준다. &#125;else &#123; System.out.print(i + "\t"); &#125;//if2 count++; //찍을때마다 카운트 1씩 증가 if (count == 10) &#123; //count % 10 == 0 이거쓰면 count 초기화 안해도 된다. System.out.println(); count = 0; //count를 0으로 초기회 &#125;//if3 &#125;//if1 &#125;//for &#125;//main()&#125;// class while문while문 : 반복횟수를 모를 경우 사용 조건식이 참이면 실행되고, 거짓이면 종료된다. (선조건 → 후처리) 12345초기값 설정; while(조건식)&#123; 조건식이 참일때 실행되는 문장(실행문); 증감값;&#125; 예제11234567891011121314151617181920public class While &#123; public static void main(String[] args) &#123; //1부터 10까지의 누적합(forSum)을 구하시오 : for int forSum = 0; for(int i = 1 ; i &lt;= 10 ; i++ ) &#123; forSum += i; &#125;//for System.out.println("for 누적합 : " + forSum); //1부터 10까지의 누적합(whileSum)을 구하시오 : while int whileSum = 0; int i = 1; while(i &lt;= 10) &#123; whileSum += i; i++; &#125;//while System.out.println("while 누적합 : " + whileSum); &#125;//main()&#125;//class 예제2123456789101112131415161718192021222324public class While &#123; public static void main(String[] args) &#123; // 1부터 10까지의 수 중에서 짝수의 합(evenSum)을 구하시오 : for, if; int evenSum = 0; for(int i = 1 ; i &lt;= 10 ; i++) &#123; if(i % 2 ==0) &#123; evenSum += i; &#125;//if &#125;//fot System.out.println("for 짝수의 합 : " + evenSum); // 1부터 10까지의 수 중에서 짝수의 합(evenSum)을 구하시오 : while, if; evenSum = 0; int i = 1; while(i &lt;= 10) &#123; if(i % 2 == 0) &#123; evenSum += i; &#125;//if i++; //증감식은 while문 안에 있어야한다. 만약, if문 안에 집어넣으면 무한루프 &#125;//while System.out.println("while 짝수의 합 : " + evenSum); &#125;//main()&#125;//class do~while문do~while문 : 조건식이 참이든 거짓이든 상관없이 실행문(do)안의 문장을 무조건 한번 실행시킨 후 조건을 검사하여 반복을 결정한다. (선처리 → 후조건) 12345초기값;do&#123; 실행문; 증감값;&#125;while(조건식); 예제112345678910111213141516171819202122232425262728public class Do_while &#123; //많이 안쓰임 (모르면 넘어가도 무관) public static void main(String[] args) &#123; // 1부터 10까지의 수 중에서 짝수의 합(evenSum)을 구하시오 : while, if int evenSum = 0; int i = 1; while(i &lt;= 10) &#123; if(i % 2 == 0) &#123; evenSum += i; &#125;//if i++; //증감식은 while문 안에 있어야한다.만약, if문 안에 집어넣으면 무한루프 &#125;//while System.out.println("while 짝수의 합 : " + evenSum); // 1부터 10까지의 수 중에서 짝수의 합(evenSum)을 구하시오 : do_while, if evenSum = 0; //재할당 : 데이터타입은 위에서 이미 선언함 i = 1; //재할당 : 데이터타입은 위에서 이미 선언함 do &#123; if(i % 2 == 0) &#123; evenSum += i; &#125;//if i++; &#125;while(i &lt;= 10); System.out.println("do_while 짝수의 합 : " + evenSum); &#125;//main()&#125;//class continuecontinue : 반복문에서 continue 아래의 실행문은 실행하지 않고 제어권을 반복문의 첫머리로 이동하는 것 예제112345678910111213141516171819202122232425public class Continue &#123; public static void main(String[] args) &#123; //1부터 10까지의 수 중에서 홀수의 누적합(oddSum)을 구하시오 //: for, if int oddSum = 0; for(int i = 1 ; i &lt;= 10 ; i++) &#123; if(i % 2 == 1) &#123; oddSum += i; &#125;//if &#125;//for System.out.println("홀수의 누적합 : " + oddSum); //1부터 10까지의 수 중에서 홀수의 누적합(oddSum)을 구하시오 //: for, if, continue oddSum = 0; for (int i = 1 ; i &lt;= 10 ; i++) &#123; if(i % 2 == 0) &#123; //짝수이면 continue; //반복문의 처음으로 되돌림 &#125;else &#123; //홀수이면 oddSum += i; //홀수의 누적합 계산 &#125;//if &#125;//for System.out.println("홀수의 누적합 : " + oddSum); &#125;//main()&#125;//class breakbreak : 반복문을 탈출하는 명령어 예제1123456789101112public class Break &#123; public static void main(String[] args) &#123; for (int i = 1 ; true ; i++) &#123; //무한루프 if(i == 10) &#123; System.out.println("i의 값이 10이므로 반복문을 종료합니다!"); break; &#125;//if System.out.println("i의 값 : " + i); &#125;//for &#125;//main()&#125;//class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 05-2. 반복문 응용]]></title>
    <url>%2F2019%2F04%2F11%2Fjava05b%2F</url>
    <content type="text"><![CDATA[별찍기 112345678910111213141516171819202122232425public class Ex_for_for &#123; public static void main(String[] args) &#123; for (int i = 1; i &lt;= 5; i++) &#123; //for i : 1부터 5까지 반복 for (int j = 1; j &lt;= i; j++) &#123; //for j : 1부터 i까지 반복 System.out.print("(" + i + "," + j + ")"); &#125;//for j System.out.println(); &#125;//for i /* ★ ★★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ */ for (int i = 1; i &lt;= 5; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print("★ "); &#125;//for j System.out.println(); &#125;//for i &#125;//main()&#125;//class 별찍기 2123456789101112131415161718192021222324252627public class Test_for_for &#123; public static void main(String[] args) &#123; /* ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ ★ */ for (int i = 1; i &lt;= 5; i++) &#123; //for (int i = 5; i &gt;= 1; i--) for (int j = 5; j &gt;= i; j--) &#123; //for (int j = 1; j &lt;= i; j++) // System.out.print("(" + i + ","+ j + ")"); /* (1,5)(1,4)(1,3)(1,2)(1,1) |(5,1)(5,2)(5,3)(5,4)(5,5) (2,5)(2,4)(2,3)(2,2) |(4,1)(4,2)(4,3)(4,4) (3,5)(3,4)(3,3) |(3,1)(3,2)(3,3) (4,5)(4,4) |(2,1)(2,2) (5,5) |(1,1) */ System.out.print("★ "); &#125;//for j System.out.println(); &#125;//for i &#125;//main()&#125;//class 구구단 11234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class Ex_gugudan &#123; public static void main(String[] args) &#123; for (int i = 2; i &lt;= 9; i++) &#123; for (int j = 1; j &lt;= 9; j++) &#123; if(i*j &lt; 10) &#123; System.out.print(i + "X" + j + "=0" + (i*j) + "\t"); &#125;else &#123;//for j System.out.print(i + "X" + j + "=" + (i*j) + "\t"); &#125;//if &#125;//for j System.out.println(); //j끝나면 줄바꿈 &#125;//for i /* 2X1=02 2X2=04 2X3=06 2X4=08 2X5=10 2X6=12 2X7=14 2X8=16 2X9=18 3X1=03 3X2=06 3X3=09 3X4=12 3X5=15 3X6=18 3X7=21 3X8=24 3X9=27 4X1=04 4X2=08 4X3=12 4X4=16 4X5=20 4X6=24 4X7=28 4X8=32 4X9=36 5X1=05 5X2=10 5X3=15 5X4=20 5X5=25 5X6=30 5X7=35 5X8=40 5X9=45 6X1=06 6X2=12 6X3=18 6X4=24 6X5=30 6X6=36 6X7=42 6X8=48 6X9=54 7X1=07 7X2=14 7X3=21 7X4=28 7X5=35 7X6=42 7X7=49 7X8=56 7X9=63 8X1=08 8X2=16 8X3=24 8X4=32 8X5=40 8X6=48 8X7=56 8X8=64 8X9=72 9X1=09 9X2=18 9X3=27 9X4=36 9X5=45 9X6=54 9X7=63 9X8=72 9X9=81 */ System.out.println("======================================================="); for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 2; j &lt;= 9; j++) &#123; if(i*j &lt; 10) &#123; System.out.print(j + "X" + i + "=0" + (i*j) + "\t"); &#125;else &#123; System.out.print(j + "X" + i + "=" + (i*j) + "\t"); &#125;//if &#125;//for j System.out.println(); &#125;// for i /* 2X1=02 3X1=03 4X1=04 5X1=05 6X1=06 7X1=07 8X1=08 9X1=09 2X2=04 3X2=06 4X2=08 5X2=10 6X2=12 7X2=14 8X2=16 9X2=18 2X3=06 3X3=09 4X3=12 5X3=15 6X3=18 7X3=21 8X3=24 9X3=27 2X4=08 3X4=12 4X4=16 5X4=20 6X4=24 7X4=28 8X4=32 9X4=36 2X5=10 3X5=15 4X5=20 5X5=25 6X5=30 7X5=35 8X5=40 9X5=45 2X6=12 3X6=18 4X6=24 5X6=30 6X6=36 7X6=42 8X6=48 9X6=54 2X7=14 3X7=21 4X7=28 5X7=35 6X7=42 7X7=49 8X7=56 9X7=63 2X8=16 3X8=24 4X8=32 5X8=40 6X8=48 7X8=56 8X8=64 9X8=72 2X9=18 3X9=27 4X9=36 5X9=45 6X9=54 7X9=63 8X9=72 9X9=81 */ &#125;//main()&#125;//class 구구단 2123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class Test_gugudan &#123; public static void main(String[] args) &#123; /* * 2X1=02 3X1=03 4X1=04 5X1=05 6X1=06 7X1=07 8X1=08 9X1=09 2X2=04 3X2=06 4X2=08 * 5X2=10 6X2=12 7X2=14 8X2=16 9X2=18 2X3=06 3X3=09 4X3=12 5X3=15 6X3=18 7X3=21 * 8X3=24 9X3=27 2X4=08 3X4=12 4X4=16 5X4=20 6X4=24 7X4=28 8X4=32 9X4=36 2X5=10 * 3X5=15 4X5=20 5X5=25 6X5=30 7X5=35 8X5=40 9X5=45 2X6=12 3X6=18 4X6=24 5X6=30 * 6X6=36 7X6=42 8X6=48 9X6=54 2X7=14 3X7=21 4X7=28 5X7=35 6X7=42 7X7=49 8X7=56 * 9X7=63 2X8=16 3X8=24 4X8=32 5X8=40 6X8=48 7X8=56 8X8=64 9X8=72 2X9=18 3X9=27 * 4X9=36 5X9=45 6X9=54 7X9=63 8X9=72 9X9=81 */ // ① for문 for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 2; j &lt;= 9; j++) &#123; if (i * j &lt; 10) &#123; System.out.print(j + "X" + i + "=0" + (i * j) + "\t"); &#125; else &#123; System.out.print(j + "X" + i + "=" + (i * j) + "\t"); &#125; // if &#125; // for j System.out.println(); &#125; // for i System.out.println("=================================================="); // ② while문 int i = 1, j = 2; while (i &lt;= 9) &#123; j= 2; while (j &lt;= 9) &#123; if (i * j &lt; 10) &#123; System.out.print(j + "X" + i + "=0" + (i * j) + "\t"); &#125; else &#123; System.out.print(j + "X" + i + "=" + (i * j) + "\t"); &#125; j++; &#125; // while System.out.println(); i++; &#125; // while System.out.println("=================================================="); // ③ do~while문 i = 1; // → ②번에서 변수를 정의해줬기 때문 do &#123; j = 2; do &#123; if (i * j &lt; 10) &#123; System.out.print(j + "X" + i + "=0" + (i * j) + "\t"); &#125; else &#123; System.out.print(j + "X" + i + "=" + (i * j) + "\t"); &#125; j++; &#125; while (j &lt;= 9); System.out.println(); i++; &#125; while (i &lt;= 9); &#125;// main()&#125;// class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 04. 조건문]]></title>
    <url>%2F2019%2F04%2F09%2Fjava04%2F</url>
    <content type="text"><![CDATA[조건문이란?조건에 따라 코드의 실행 흐름을 다르게 동작하도록 제어하는 것종류는 if문, if~else문, else~if문, switch~case문 if문if문 : 조건을 판단하여 참일 경우에만 실행 123if(조건식)&#123; // 비교연산자 또는 논리연산자가 들어간다. 조건식이 참일때 실행되는 문장;&#125;//if 실행되는 문장이 1줄이면 {}을 생략해도 된다. if(조건식) 실행문장;(권장하진 않음) 예제1123456789101112131415public class If &#123; public static void main(String[] args) &#123; int a = 10; if(a % 2 == 0) &#123; // a를 2로 나눈 나머지 값이 0과 같다 : 짝수 System.out.println("입력값은 " + a + "입니다."); System.out.println(a + "은 짝수입니다."); &#125;//if int b = 9; if(b % 2 != 0) &#123; // b를 2로 나눈 나머지 값이 0과 같지 않다 : 홀수 System.out.println("입력값은 " + b + "입니다." + "\n" + b + "는 홀수입니다."); &#125;//if &#125;//main()&#125;//class if~else문if~else문 : 조건을 판단하여 참일때 또는 거짓일때의 명령을 실행 12345if(조건식)&#123; 참일때 실행되는 문장; //여기까지 수행되면 단순 if문&#125; else&#123; 거짓일때 실행되는 문장;&#125;//if 예제11234567891011public class If_else &#123; public static void main(String[] args) &#123; int a = 10; if(a % 2 == 0) &#123; System.out.println("짝수입니다."); //조건식이 true &#125;else &#123; System.out.println("홀수입니다."); //조건식이 false &#125;//if &#125;//main()&#125;//class 예제21234567891011121314151617181920public class If_else &#123; public static void main(String[] args) &#123; //성별코드(code) 값이 1 또는 3이면 '남자', 그외에는 '여자'로 출력 int code = 3; /* if(code != 2) &#123; System.out.println("남자입니다."); &#125; else &#123; System.out.println("여자입니다."); &#125;*/ //만약 이렇게 코드를 만들면 1,3뿐 아니라 4를 썼을때도 남자가 나온다. if(code == 1 || code == 3) &#123; System.out.println("남자입니다."); &#125; else &#123; System.out.println("여자입니다."); &#125;//if &#125;//main()&#125;//class else~if문else~if문 : 여러개의 조건을 판단하여, 해당 조건을 만족할 경우 실행 123456789if(조건식1)&#123; 조건식1이 참일때 실행되는 문장;&#125;else if(조건식2)&#123; 조건식2가 참일때 실행되는 문장;&#125;else if(조건식N)&#123; 조건식N이 참일때 실행되는 문장;&#125;else&#123; 거짓일때 실행되는 문장;&#125; 예제1123456789101112131415161718public class Else_if &#123; public static void main(String[] args) &#123; int score = 87; if(score &gt;= 90) &#123; System.out.println("A학점"); &#125;else if(score &gt;= 80) &#123; System.out.println("B학점"); &#125;else if(score &gt;= 70) &#123; System.out.println("C학점"); &#125;else if(score &gt;= 60) &#123; System.out.println("D학점"); &#125;else &#123; System.out.println("F학점"); &#125;//if &#125;//main()&#125;//class 예제2123456789101112131415public class Else_if &#123; public static void main(String[] args) &#123; //성별코드(code)가 1이면 '남자', 2이면 '여자', 3이면 '남자', 4이면 '여자' //그 외에는 오류메세지("성별코드가 잘못입력되었습니다")출력 int code = 3; if(code == 1 || code == 3) &#123; System.out.println("남자입니다."); &#125;else if(code == 2 || code == 4) &#123; System.out.println("여자입니다."); &#125;else &#123; System.out.println("성별코드 오류"); &#125;//if &#125;//main()&#125;//class 중첩 if문중첩 if문 : if문 안에 다른 if문이 있는 문장 123456789if(조건식A)&#123; if(조건식1)&#123; 조건식A를 만족한 상태에서 조건식1이 참일때 실행되는 문장; &#125;else if(조건식2)&#123; 조건식A를 만족한 상태에서 조건식2가 참일때 실행되는 문장; &#125;//if&#125;else if(조건식B)&#123; 조건식 B가 참일때 실행되는 문장;&#125;//if 예제112345678910111213141516171819202122public class If_if &#123; public static void main(String[] args) &#123; int score = -87; if(score &gt;= 0 &amp;&amp; score &lt;= 100) &#123; if(score &gt;= 90) &#123; System.out.println("A학점"); &#125;else if(score &gt;= 80) &#123; System.out.println("B학점"); &#125;else if(score &gt;= 70) &#123; System.out.println("C학점"); &#125;else if(score &gt;= 60) &#123; System.out.println("D학점"); &#125;else &#123; System.out.println("F학점"); &#125;//if &#125;else &#123; System.out.println("점수입력오류"); &#125;//else &#125;//main()&#125;//class switch~case문switch~case문 : 다중 if문을 간략하게 표현 1234567891011121314switch(기준값)&#123; case값1 : 값1이 참일때 실행되는 문장; break; case값2 : 값2가 참일때 실행되는 문장; break; case값N : 값N이 참일때 실행되는 문장; break; default : 거짓일때 실행되는 문장; break;&#125; 기준값, 비교값(값1,값2,값N)은 정수형(수치형)의 자료이여야 한다. 실행문 뒤에는 반드시 break; 입력 예제1123456789101112131415161718192021222324252627public class Switch_case &#123; public static void main(String[] args) &#123; int score = 87; switch(score / 10) &#123; case 10 : //100 // System.out.println("A학점"); // break; 이렇게해도 가능 case 9 : break;에서 값나옴 case 9 : //90점 ~ 99점 System.out.println("A학점"); break; case 8 : //80점 ~ 89점 System.out.println("B학점"); break; case 7 : //70점 ~ 79점 System.out.println("C학점"); break; case 6 : //60점 ~ 69점 System.out.println("D학점"); break; default : //60점 미만 System.out.println("F학점"); break; &#125;//switch &#125;//main()&#125;//class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 4월 2주차 Today I Learned]]></title>
    <url>%2F2019%2F04%2F08%2F1942%2F</url>
    <content type="text"><![CDATA[190408 TIL 다중 if문 : 여러개의 조건을 판단하여, 해당 조건을 만족할 경우 실행 123456789if(조건식1)&#123; 조건식1이 참일때 실행되는 문장;&#125;else if(조건식2)&#123; 조건식2가 참일때 실행되는 문장;&#125;else if(조건식N)&#123; 조건식N이 참일때 실행되는 문장;&#125;else&#123; 거짓일때 실행되는 문장; &#125; 중첩 if문 : if문 안에 다른 if문이 있는 문장 123456789if(조건식A)&#123; if(조건식1)&#123; 조건식A를 만족한 상태에서 조건식1이 참일때 실행되는 문장; &#125;else if(조건식2)&#123; 조건식A를 만족한 상태에서 조건식2가 참일때 실행되는 문장; &#125;//if&#125;else if(조건식B)&#123; 조건식 B가 참일때 실행되는 문장;&#125;//if 선택문(switch ~~ case ~~) : 다중 if문을 간략하게 표현 1234567891011121314switch(기준값)&#123; case값1 : 값1이 참일때 실행되는 문장; break; case값2 : 값2가 참일때 실행되는 문장; break; case값N : 값N이 참일때 실행되는 문장; break; default : 거짓일때 실행되는 문장; break;&#125; 기준값, 비교값(값1,값2,값N)은 정수형(수치형)의 자료이여야 한다. 실행문 뒤에는 반드시 break; 입력 제한사항(제약조건)으로 인하여 실무에서는 거의 사용되지 않는다. 반복문(순환문, Loop문) : for, while, do ~ while 123for(초기값(시작값) ; 조건식(최종값) ; 반복후작업(증감값)) &#123; 실행문(반복할 문장); &#125; 190409 TIL DB 오라클/SQL : 숫자함수,문자함수,날짜함수,형변환함수, 일반함수 while : 반복횟수를 모를 경우 사용 (선조건 → 후처리) 12345초기값 설정; while(조건식)&#123; 조건식이 참일때 실행되는 문장(실행문); 증감값;&#125; do~~while : 조건이 처음부터 거짓이더라도 실행문(do)은 최소 1번은 실행 (선처리 → 후조건) 12345초기값;do&#123; 실행문; 증감값;&#125;while(조건식); 드디어 별찍기를 해봤다.사실 잘 모르겠다. 190410 TIL Scanner 클래스: 정수,실수,문자열을 읽을수있음 사용자로부터 입력받기위한 준비 1import java.util.Scanner; : Scanner를 사용하기 위해 외부클래스 호출 1Scanner sc = new Scanner(System.in); : Scanner 객체를 생성 System.in : 키보드로부터 입력 1int a = sc.nextInt(); : 정수를 입력 nextLine() 문자열 전체를 입력 190411 TIL DB 오라클/SQL : 조건문,그룹함수 Scanner복습 - 성적표,구구단 정보처리기사 교재 판매완료 뜬금없는 소방훈련, 이제 CPR 자신있음.. ㅋ 190412 TIL DB 오라클/SQL: group by, having, table join 배열(Array): 객체(Class Object)로 취급 → 참조형(Reference) 자료구조 동일한 기억공간을 메모리에 연속적으로 생성하는 구조 : 리스트(선형)구조 같은 타입을 갖는 변수들의 집합 배열의 접근은 반드시 요소번호(index)로 접근하며, index는 0부터 시작 배열의 크기(길이) : 배열명.length]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 03.연산자(Operator)]]></title>
    <url>%2F2019%2F04%2F07%2Fjava03%2F</url>
    <content type="text"><![CDATA[연산 연산 : 주어진 식을 계산하여 결과를 얻어내는 과정 명령어의 형식[피연산자 연산자 피연산자]ex) a + 5, b + 4, … 명령부 :연산자, OpCode 주소부 :연산에 필요한 값[피연산자], Operand 1. 산술연산자 산술연산자 : +(덧셈),-(뺄셈),*(곱셈),/(나눗셈)%(나머지연산) : 짝수/홀수, 배수의 판단에 사용 ▶ 주로 조건식에서 사용 123456789101112131415161718192021222324252627282930public class Operator01 &#123; public static void main(String[] args) &#123; int a = 10, b=3; int addResult = a + b; //덧셈 int subResult = a - b; //뺄셈 int mulResult = a * b; //곱셉 int divResult = a / b; //나눗셈 int modResult = a % b; //나머지 System.out.println(addResult); //출력값 : 13 System.out.println(subResult); //출력값 : 7 System.out.println(mulResult); //출력값 : 30 System.out.println(divResult); //출력값 : 3 (int로 선언했기 때문) System.out.println(modResult); //출력값 : 1 int x = 3, y = 5; System.out.println("x + y = " + x + y); //출력값 : x + y = 35(결합) System.out.println("x + y = " + (x + y)); //출력값 : x + y = 8(연산) System.out.println(x + y + " = x + y"); //출력값 : 8 = x + y //System.out.println("x - y = " + x - y); //오류 : + x 결합 후 - y 나오기 때문 System.out.println("x - y = " + (x - y)); //출력값 : x - y = -2 System.out.println(x - y + " = x - y"); //출력값 : -2 = x - y &#125;//main()&#125;//class 2. 증감연산자 증감연산자 : ++(증가), --(감소) ▶ 반복문에서 많이 사용 별도의 연산결과를 처리하지 않은 연산자 : 단항연산 연산자의 위치가 변수의 앞인지 뒤인지에 따라 결과가 다르다. 123456789101112131415161718192021222324252627282930public class Operator02 &#123; public static void main(String[] args) &#123; int a = 0; int b = 10; System.out.println(++a); //출력값 : 1 ▶ 전위표기법(prefix) System.out.println(--b); //출력값 : 9 int c = 0; int d = 10; System.out.println(c++); //출력값 : 0 메모리 상에서는 1 System.out.println(c); //출력값 : 1 System.out.println(d--); //출력값 : 10 메모리 상에서는 9 System.out.println(d); //출력값 : 9 //x = 5, y = 10 일 경우 'x++ + ++x + y++'의 결과와 //연산이 수행된후 'x+y'의 결과는? int x = 5; int y = 10; int z = x++ + ++x + y++; System.out.println(z); //출력값 : 22 (5 + 7 + 10) System.out.println(x+y); //출력값 : 18 (7 + 11) /* 연산 출력 메모리 x++ 5 6(x) ++x 7 7(X) y++ 10 11(y) 현장에서 이런거 쓸 일 없음~ */ &#125;//main()&#125;//class 3.비트연산자 비트연산자 : 개발자의 입장에서 비트를 직접 조작할 수 있다는 장점 → 하드웨어 제어 현재는 자바에서 거의 사용하지 않는다. 1.&amp;(AND): 모두 1일때 → 1출력 2.|(OR) : 하나라도 1일때 → 1출력 3.^(XOR): 서로 다를때 → 1출력 12345678910public class Operator03 &#123; public static void main(String[] args) &#123; int x = 3; //2진법 : 0011 int y = 2; //2진법 : 0010 System.out.println(x &amp; y); //출력값 : 2 (0010) System.out.println(x | y); //출력값 : 3 (0011) System.out.println(x ^ y); //출력값 : 1 (0001) &#125;//main()&#125;//class 4.비교연산자 비교연산자 : 연산의 결과는 true, false 반환 ▶ 조건식에 많이 사용 &gt;, &gt;=, &lt;, &lt;= : 수학의 연산과 같은 관계연산자(비교연산) a = b : 수학에서는 같다라는 의미이지만 프로그램에서는 할당(대입)연산자 a == b : 프로그램에서 같다라는 의미 a != b : 같지않다라는 의미 1234567891011121314public class Operator04 &#123; public static void main(String[] args) &#123; int a = 10, b = 5; System.out.println(a&gt;b); //true System.out.println(a&gt;=b); //true System.out.println(a&lt;b); //false System.out.println(a&lt;=b); //false System.out.println(a==b); //false System.out.println(a!=b); //true System.out.println(a&gt;10); //false System.out.println(a&gt;=10); //true &#125;//main()&#125;//class 5.논리연산자 논리연산자 : 연산의 결과는 true, false 반환 여러개의 조건을 판단 ▶ 조건식에 많이 사용 조건A &amp;&amp; 조건B : 조건A도, 조건B도 모두 참일 경우 → 참으로 출력 조건A || 조건B : 조건A 또는 조건B 중에서 하나라도 참일 경우 → 참으로 출력 AND 조건 (모두 만족) : ~~이면서, ~~이고 OR 조건 (하나라도 만족) : ~~이거나, ~~또는 1234567891011121314public class Operator05 &#123; public static void main(String[] args) &#123; System.out.println(10 &gt; 5 &amp;&amp; 20 &gt; 5); //true &amp;&amp; true → true System.out.println(10 &gt; 5 &amp;&amp; 5 &gt; 20); //true &amp;&amp; false → false System.out.println(5 &gt; 10 &amp;&amp; 20 &gt; 5); //false &amp;&amp; true → false System.out.println(5 &gt; 10 &amp;&amp; 5 &gt; 20); //false &amp;&amp; false → false //Dead code : 두 조건 중 조건1이 false 일때, 조건2가 무엇이든 false가 된다. System.out.println(10 &gt; 5 || 20 &gt; 5); //true || true → true System.out.println(10 &gt; 5 || 5 &gt; 20); //true || false → true //Dead code : 두 조건 중 조건1이 true 일때, 조건2가 무엇이든 true가 된다. System.out.println(5 &gt; 10 || 20 &gt; 5); //false || true → true System.out.println(5 &gt; 10 || 5 &gt; 20); //false || false → false &#125;//main()&#125;//class 6.대입연산자 대입연산자(=) : =(equal)은 같다라는 의미가 아니라 대입을 의미 ▶ 할당연산자 L-Value = R-Value : R-Value의 값(연산결과)을 L-Value에 대입(할당) 복합대입연산자 : R-Value에서 사용되는 변수와 L-Value에 대입(할당)되는 변수가 동일할 때 사용 a += b / a = a + b 과 동일 a -= b / a = a - b 과 동일 12345678910111213141516171819202122232425262728public class Operator06 &#123; public static void main(String[] args) &#123; int a = 10; //정수형 변수 a를 선언하고, 값(10)을 할당 → 초기화 System.out.println("a의 값 : " + a); //10 int b = a; //정수형 변수 b를 선언하고, 값(변수 a의 값)을 할당 → 초기화 System.out.println("b의 값 : " + b); //10 b = a + a; //재할당 System.out.println("b의 값 : " + b); //20 a = a + a; //재할당 System.out.println("a의 값 : " + a); //20 // a += a; //a = a + a; System.out.println("a의 값 : " + a); //40 int x = 10; x = x + 100; System.out.println("x의 값 : " + x); //110 int y = 10; y += 100; System.out.println("y의 값 : " + y); //110 &#125;//main()&#125;//class 7. 3항연산자 3항연산자 : 3개의 항으로 구성 ▶ 조건식을 작성할 경우 많이 편리 조건식 ? &quot;참값&quot; : &quot;거짓값&quot;; 1234567891011121314151617public class Operator07 &#123; public static void main(String[] args) &#123; //3항 연산 int a = 10; String result = a == 10 ? "맞다" : "틀리다"; System.out.println(result); System.out.println(a == 10 ? "맞다" : "틀리다"); String str1 = "100"; //문자 100 if(str1 == "100") &#123; //숫자 100 → "" 추가 → 문자 100 System.out.println("맞습니다."); &#125; else &#123; System.out.println("틀립니다."); &#125;//if() &#125;//main()&#125;//class 특수기호문자(Escape Sequence) 특수기호문자(Escape Sequence) : 프로그램에서 사용되는 특수기호문자, 역슬래시(\)를 먼저 입력하고 사용한다. ▶ 출력문에 많이 사용 \t : 탭간격(기본 8칸 띄어쓰기) \n : 줄바꿈(뉴라인) \b : 백스페이스 \r : 행의 처음으로 커서를 이동 \&#39; : 작은따옴표를 표시 \&quot; : 큰따옴표를 표시 \\ : \(역슬래시, root) 표시 12345678910111213141516171819202122public class Operator08 &#123; public static void main(String[] args) &#123; System.out.println("1.HelloWorld"); System.out.println("2.Hello" + "\t" + "World"); // \t : 탭간격(기본 8칸) //글꼴에 따라 띄어 쓴 정도가 다름 System.out.println("3.Hello\tWorld"); //문자열 출력은 안에 연결해서 사용가능 System.out.println("4.Hello" + "\n" + "World"); // \n : 줄바꿈(뉴라인) System.out.println("5.Hello" + "\b" + "World"); // \b : 백스페이스 System.out.println("6.Hello" + "\r" + "World"); // \r : Carriage Return // 6.Hello : 행의 처음으로 커서를 이동 // World // = Worldlo System.out.println("7.Hello" + "\'" + "World"); // \' : 작은따옴표를 표시 System.out.println("8.Hello" + "\"" + "World"); // \" : 큰따옴표를 표시 System.out.println("9.Hello" + "\\" + "World"); // \\ : \(역슬래시, root) 표시 System.out.println("번호" + "\t" + "이름" + "\t" + "주소"); // 아래 내용들이 깔끔하게 출력 System.out.println("001" + "\t" + "홍길동" + "\t" + "광주시 서구 농성동"); System.out.println("002" + "\t" + "허준" + "\t" + "광주시 남구 봉선동"); &#125;//main()&#125;//class 16진수, 8진수 16진수 : 숫자 앞에 0x를 붙인다. 8진수 : 숫자 앞에 0을 붙인다. 12345678910111213public class Operator09 &#123; public static void main(String[] args) &#123; int a = 11; //10진수 System.out.println(a); int b = 011; //8진수 System.out.println(b); int c = 0x11; //16진수 System.out.println(c); &#125;//main()&#125;//class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 02.형변환(Casting)]]></title>
    <url>%2F2019%2F04%2F05%2Fjava02%2F</url>
    <content type="text"><![CDATA[형변환(Casting) 규칙 ========= UpCasting (자동형 변환, 묵시적 형변환) =========&gt; byte(1) → short/char(2) → int(4) → long(8) → float(4) → double(8) &lt;======== DownCasting (강제형 변환, 명시적 형변환) ======== 자동형 변환: 작은타입이 큰타입으로 자동으로 변환→ 묵시적 형변환, UpCasting 강제형 변환: 큰타입을 작은타입으로 강제적으로 변환→ 명시적 형변환, DownCasting, 일반적인 의미의 Casting 래퍼 클래스(Wrapper class) 래퍼 클래스(Wrapper class): 기본 타입에 해당하는 데이터를 객체로 이름 그대로 포장해 주는 클래스각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체로 만들어 준다. 예제 112345678910111213141516171819202122232425262728293031323334public class Casting01 &#123; public static void main(String[] args) &#123; int a = 10; //정수형 변수 a를 선언하고 값(10)을 할당 ▶ 초기화 double b; //실수형 변수 b를 선언만 한 상태 b = a; //변수a의 값을 b에 할당 //자동형 변환:작은타입(int)이 큰타입(double)으로 자동으로 변환 //→묵시적 형변환, UpCasting System.out.println("변수 a:" + a); System.out.println("변수 b:" + b); // 출력내에서 +는 더하기가 아니라 결합을 의미 int c; //정수형 변수 c를 선언만 한 상태 double d = 34.5;//실수형 변수 d를 선언하고 값(34.5)을 할당 ▶ 초기화 //c = d; //오류:큰타입(double)을 작은타입(int)에 할당 c = (int) d; //강제형 변환(double → int) //→명시적 형변환, DownCasting, 일반적인 의미의 Casting System.out.println("변수 c:" + c); //출력값 : 34 → 0.5의 손실 발생 System.out.println("변수 d:" + d); //출력값 : 34.5 int x = 129; byte y = (byte) x; //강제형 변환(int → byte) System.out.println("변수 x:" + x); //출력값 : 128 System.out.println("변수 y:" + y); //출력값 : -128 //byte(-128~127) 1이 남아서 -128부터 시작, //만약 x = 129였다면 -127이 된다. char i = 'A'; int j = i; //자동형 변환(char → int) System.out.println("변수 i:" + i); //출력값 : A System.out.println("변수 j:" + j); //출력값 : 65 → ASCII(UniCode) 코드값 System.out.println("변수 j:" + (char)j); //출력값 : A ▶ 강제형 변환 (int → char) //주로 이러한 용도로 사용된다. &#125; //main&#125; //class 예제 212345678910111213141516public class Casting02 &#123; public static void main(String[] args) &#123; char upper = 'A'; char lower = 'a'; System.out.println(upper); //출력값 : A(65) System.out.println(lower); //출력값 : a(97) System.out.println(upper + lower); //출력값 : 162..? //대문자(upper)를 소문자로 바꾸어서 출력하시오. //System.out.println(upper + 32); ▶ 출력값 : 97 //System.out.println((char)upper + 32); (X) //출력값 : 97 → char + int → int 로 계산됨 System.out.println((char)(upper + 32)); //출력값 : a → upper + 32를 먼저 연산해준다. &#125;//main()&#125;//class 아래의 명령은 몇 번의 형변환이 발생하는가? 1double sum = 3.5F + 12; ① 3.5F + 12.0F // int → float ② double sum = 15.5F; // float → double 예제 312345678910111213141516171819202122232425public class Casting03 &#123; public static void main(String[] args) &#123; //String 클래스를 이용해 문자 10(su1)과 문자 20(su2)을 더하기 연산 String su1 = "10"; String su2 = "20"; System.out.println(su1 + su2); //출력값 : 1020 //문자는 Concatenation (연결,결합) int a = Integer.parseInt(su1); //변수 a에는 정수 10이 기억 ▶ Wrapper Class int b = Integer.parseInt(su2); //변수 b에는 정수 20이 기억 ▶ Wrapper Class System.out.println(a + b); //출력값 : 30 ▶ 숫자는 연산된다. System.out.println(Integer.parseInt(su1) + Integer.parseInt(su2)); //한번에 처리하는 식 String su3 = "10.5"; //double type로 변환 해줘야함 String su4 = "20.3"; //▶ Wrapper Class System.out.println(su3+su4); //출력값 : 10.520.3 double c = Double.parseDouble(su3); double d = Double.parseDouble(su4); System.out.println(c+d); //출력값 : 30.8 System.out.println(Double.parseDouble(su3)+Double.parseDouble(su4)); //한번에 처리하는 식 &#125; //main()&#125; //class]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA기초 01.데이터타입]]></title>
    <url>%2F2019%2F04%2F03%2Fjava01%2F</url>
    <content type="text"><![CDATA[기본용어 선언 변수의 형을 정의하는 것 1int a; char b; double c; 할당 값을 주는 것 1a = 1; b = 'A'; c = 12.5; 초기화 선언과 동시에 값을 주는 것 1int a = 1; char b = 'A' double c = 12.5; 나열 같은 데이터 타입일때 쭉 연결하는 것 1int a = 1, b = 2; 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 1int a = 1; → int a = 3; 변수 변수 데이터를 저장할 메모리 기억공간 기억공간에는 이름이 있어야 한다. ▶ 식별자 데이터를 담는 상자 : 크기 ▶ Data Type(자료형) ※ 변수 이름 작성 규칙 반드시 영문자 소문자로 시작 첫글자는 영문자, ‘_’, ‘$’으로만 시작 예약어(KeyWord)는 사용 불가 띄어쓰기는 사용할 수 없다 가급적이면 이름에 의미가 나타나도록 작성하자 자료형 자료형(Data Type) 변수의 크기와 저장해야 할 데이터의 종류를 결정 기본자료형(PDT): 기본 데이터 타입의 크기가 정해져있다.CPU나 운영체제에 따라 변경되지 않는다.정수형 : byte(1), short(2), int(4), long(8)실수형 : float(4), double(8)문자형(단일문자) : char(2)부울형(논리형) : boolean(1) 사용자정의 자료형(UDDP): 참조형 자료(Reference Type) → 4Byte클래스 타입인터페이스 타입배열(열거) 타입 예제 1 선언,할당,초기화 1234567891011121314151617181920212223public class Variable01 &#123; public static void main(String[] args) &#123; //정수 2개를 저장할 변수를 선언하시오.(변수명은 a.b) int a; //정수형 변수a를 선언 int b; //정수형 변수b를 선언 //int a,b; //같은 자료형의 변수를 나열(comma(,)구분) //변수 a에 10, 변수 b에 20을 할당하시오. a = 10; //변수 a에 값(10)을 할당(대입) b = 20; //변수 b에 값(20)을 할당(대입) //정수형 변수c와 d를 선언하고, c에 30,d에 40을 할당하시오. int c = 30; //선언과 동시에 값을 할당 ▶ 초기화 int d = 40; //선언과 동시에 값을 할당 ▶ 초기화 // int c = 30, d = 40; //같은 자료형의 변수를 초기화하고 나열 //각각의 변수에 저장된 데이터를 출력 System.out.println("a의 값:" + a); System.out.println("b의 값:" + b); System.out.println("c의 값:" + c); System.out.println("d의 값:" + d); &#125;//main()&#125;//class 예제 2 재할당 1234567891011121314151617public class Variable02 &#123; public static void main(String[] args) &#123; //정수형 변수 a와 b를 선언하고, a에 10, b에 20을 할당하시오. int a = 10; int b = 20; //변수 a와 b의 값을 출력 System.out.println(a); System.out.println(b); //a의 값을 30으로 b의 값을 40으로 변경하여 출력하시오 ▶ 재할당 a = 30; // a의 값이 10에서 30으로 변경(재할당) b = 40; // b의 값이 20에서 40으로 변경(재할당) System.out.println(a); System.out.println(b); &#125; //main&#125; //class 예제 3 정수형 byte,short,int,long 1234567891011121314151617public class Variable03 &#123; public static void main(String[] args) &#123; //정수형 데이터 타입 : byte, short, int, long byte b = 100; //1Byte (-128 ~ 127) System.out.println("변수 b:" + b); short s = 1000; //2Byte (-32,768 ~ 32,767) System.out.println("변수 s:" + s); int i = 1000000; //4Byte (-2,147,483,648 ~ 2,147,483,647) System.out.println("변수 i:" + i); long l = 12345678900L; // long 타입은 숫자 뒤에 L, // 모든 정수타입 리터럴은 int형으로 처리하기 때문 System.out.println("변수 l:" + l); &#125; //main()&#125; //class 예제 4 실수형 float,double 1234567891011121314public class Variable04 &#123; public static void main(String[] args) &#123; //실수형 데이터 타입 : float, double float f = 123.4567890123456789F; //4Byte double d = 123.4567890123456789; //8Byte System.out.println("변수 f:" + f); //123.45679 //마지막 숫자 반올림해서 나옴 System.out.println("변수 d:" + d); //123.45678901234568 //마지막 숫자 반올림해서 나옴 &#125;//main()&#125;//class 예제 5 문자형 char / 문자열 String 12345678910111213141516171819202122public class Variable05 &#123; public static void main(String[] args) &#123; //문자 데이터 타입 : char(2Byte) ▶ 하나의 글자만 저장 //값을 할당할 때는 작은따옴표를 사용한다. char a = 'A'; char b = '가'; char c = '★'; System.out.println("변수 a:" + a); System.out.println("변수 b:" + b); System.out.println("변수 c:" + c); //---------------------------------- //String : 문자,문자열을 저장할 수 있는 클래스(→첫글자 대문자) //값을 할당할 때는 쌍따옴표를 사용한다. String str1 = "ABC"; String str2 = "가나다"; System.out.println("변수 str1:" +str1); System.out.println("변수 str2:" +str2); &#125;//main()&#125;//class 예제 6 논리형 boolean 12345678910public class Variable06 &#123; public static void main(String[] args) &#123; // 논리형(부울형):boolean(1byte)▶true,false 만 기억 boolean t = true; boolean f = false; System.out.println("변수 t:" + t); System.out.println("변수 f:" + f); &#125;&#125;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 4월 1주차 Today I Learned]]></title>
    <url>%2F2019%2F04%2F01%2F1941%2F</url>
    <content type="text"><![CDATA[190401 TIL 국비과정 본과정 시작 19.04.01~19.09.30 09:20 ~ 18:00 (월~금) 사전학습때 했던거 복습 개발환경구축 ㅎ.. 수업 교재를 받았다. 정처기는 취득했기에 매물예정 190402 TIL 변수프로그램 실행중에 값을 임시저장 하기위한 공간 변수명 선언 규칙(Naming Convention) JAVA는 대소문자를 구분한다. 첫글자는 반드시 문자, _, $로만 시작된다. 지정된 단어(Keyword)는 사용할 수 없다. 변수의 이름은 소문자로 시작하고,단어와 단어를 연결하고자 할 경우,_를 이용하거나, 연결되는 단어의 첫글자를 대문자로 표시예 : sum_result, totalCount, salePrice 등 변수의 이름은 가능하면 의미를 알아볼 수 있도록 사용예 : userId, userPw 등 기본 데이터타입 논리타입 boolean (1Byte) true/false만 기억 문자타입 char (2Byte) 하나의 글자만 저장 정수타입 byte (1Byte)[-128 ~ 127] short (2Byte)[-32,768 ~ 32,767] int (4Byte)[기본형][-2,147,483,648 ~ 2,147,483,647] long (8byte)아무튼 큼, long 타입은 숫자 뒤에 `L`,`l` 실수타입 float (4Byte)숫자 뒤에 `F`,`f` double (8byte) [기본형] 190403 TIL 선언 변수의 형을 정의하는 것 할당 값을 주는 것 초기화 선언과 동시에 값을 주는 것 나열 같은 데이터 타입일때 쭉 연결하는 것 재할당 할당된 값에 다시 할당해서 값을 바꾸는 것 형 변환(Casting) 규칙====== UpCasting (자동형 변환, 묵시적 형변환) ======&gt;byte(1) → short(2)/ char(2) → int(4) → long(8) → float(4) → double(8)&lt;===== DownCasting (강제형 변환, 명시적 형변환) ===== 190404 TIL 연산주어진 식을 계산하여 결과를 얻어내는 과정 산술연산자: + , - , * , / , % %(나머지연산)이란?: 짝수/홀수, 배수의 판단에 사용(주로 조건식에서 사용) 증감연산자: ++(증가), --(감소) → 반복문에서 많이 사용 별도의 연산결과를 처리하지 않은 연산자 : 단항연산 연산자의 위치가 변수의 앞인지 뒤인지에 따라 결과가 다르다. 비트연산자: 개발자의 입장에서 비트를 직접 조작할 수 있다는 장점 → 하드웨어 제어현재는 자바에서 거의 사용하지 않는다. &amp;(AND): 모두 1일때 → 1출력 |(OR): 하나라도 1일때 → 1출력 ^(XOR): 서로 다를때 → 1출력 비교연산자: 조건식에 많이 사용, 연산의 결과는 true, false 반환 &gt;, &gt;=, &lt;, &lt;= : 수학의 연산과 같은 관계연산자(비교연산) a = b : 수학에서는 같다라는 의미이지만 프로그램에서는 할당(대입)연산자 a == b : 프로그램에서 같다라는 의미 a != b : 같지않다라는 의미 190405 TIL 3항연산자 : 3개의 항으로 구성된다. 조건식을 작성할 경우 편리하다. 조건식 ? &quot;참값&quot; : &quot;거짓값&quot;; 특수기호문자(Escape Sequence) : 출력문에서 많이 사용된다. 역슬래시()를 먼저 입력하고 사용한다. \t : 탭간격(기본본 8칸 띄어쓰기) \n : 줄바꿈(뉴라인) \b : 백스페이스 \r : Carriage Return \&#39; : 작은따옴표를 표시 \&quot; : 큰따옴표를 표시 \\ : (역슬래시, root) 표시 cmd에서 실행 16진수 : 숫자 앞에 0x를 붙인다.8진수 : 숫자 앞에 0을 붙인다. 단순 if문: 조건을 판단하여 참일 경우에만 실행 123if(조건식 : 비교연산자 또는 논리연산자가 들어가야함)&#123; 조건식이 참일때 실행되는 문장;&#125;//if 블럭 if문: 조건을 판단하여 참일때 또는 거짓일떄의 명령을 실행 if(조건식){ 참일때 실행되는 문장; //여기까지 하면 단순if } else{ 거짓일때 실행되는 문장; }//if_else]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 3월 5주차 Today I Learned]]></title>
    <url>%2F2019%2F03%2F29%2F190329%2F</url>
    <content type="text"><![CDATA[190325 TIL 국비과정 사전예습 시작 19.03.25~19.03.29 09:20 ~ 12:10 (월~금) 블로그에 Disqus를 연동이제 나도 댓글을 남길 수 있다. Disqus 연동 요약Disqus에 가입하여 shortname을 설정 한 뒤themes/note 경로의 _config.yml 에서#Disqus부분을 다음과 같이 수정한다. #Disqus disqus: enable: true shortname: ingjin #shortname 삽입 count: true lazyload: false 그렇다, 오늘은 별거 안했다. 190326 TIL Java 개발 환경 구축 JDK 설치 JAVA_HOME 환경 변수 생성 PATH 환경 변수 추가;%JAVA_HOME%\bin; CLASSPATH 환경 변수 생성.;%JAVA_HOME%\lib; CLASSPATH? 컴퓨터 어딘가에 존재하는클래스 파일을 사용하기 위한 방법. 미지정시 현재 디렉토리에서만필요한 클래스를 가져다 쓴다. 코드블럭 라인넘버가 나온다.어제는 왜 안나온거지..?function add(x, y) { return x + y } 190327 TIL 예비군 기본훈련 다녀왔습니다. Markdown 이미지 크기 조절&lt;img&gt;태그가 더 편한것 같은 이 느낌 &lt;img src="이미지 url" width="원하는 크기"&gt; width=&quot;800&quot; width=&quot;400&quot; 사실 마크다운으로 수정하면자꾸 엑박이 뜬다..이유가 뭘까..? 190328 TIL java파일을 컴파일하면class파일이 생성된다. 컴파일코드를 컴퓨터가 읽을 수 있도록 변환하는 과정. 패키지서로 관련이 있는 클래스 또는 인터페이스들을하나로 묶어 놓은 묶음. syso 입력 후 ctrl+space= System.out.println() 생성 190329 TIL 이클립스(Eclipse)에서프로젝트를 불러오는 방법= Import하는 방법 헝가리안 표기법 변수 및 함수의 인자 이름 앞에데이터 타입을 명시하는 코딩 규칙 요즘 안쓴다고 한다. 사전학습이 끝났다.생각해보니 뭐 안했다.]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19년 3월 4주차 Today I Learned]]></title>
    <url>%2F2019%2F03%2F24%2F190324%2F</url>
    <content type="text"><![CDATA[190323 TIL 초보몽키님의 블로그를 참고하여나도 Today I Learned (TIL)을본격적으로 시작해 보려고 한다. HTML,CSS,JavaScript 모르는 상태에서구글링하면서 Hexo블로그를 만들어 보았다.TIL을 여기서 할 지 티스토리에서 할 지 고민 중 _config.yml파일을 수정하는 방법을 알았다. Notepad++를 사용한다. 190324 TIL Hueman에서 nexT로 갈아탔다. 간단한 Markdown문법을 배웠다.Markdown Editor는 Marp를 써보려고 한다. Markdown이미지 업로드 꿀팁 이미지가 올라와서 행복한 개구리 :)]]></content>
      <categories>
        <category>TIL</category>
      </categories>
      <tags>
        <tag>TIL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
